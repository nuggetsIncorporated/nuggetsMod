GER_increase_black_monday = {
	effect_tooltip = {
		swap_ideas = {
			remove_idea = GER_black_monday_2
			add_idea = GER_black_monday_3
		}
	}
	hidden_effect = {
		if = {
			limit = { has_idea = GER_black_monday_2 }
			swap_ideas = {
				remove_idea = GER_black_monday_2
				add_idea = GER_black_monday_3
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_3 }
			swap_ideas = {
				remove_idea = GER_black_monday_3
				add_idea = GER_black_monday_4
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_4 }
			swap_ideas = {
				remove_idea = GER_black_monday_4
				add_idea = GER_black_monday_5
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_5 }
			swap_ideas = {
				remove_idea = GER_black_monday_5
				add_idea = GER_black_monday_6
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_6 }
			swap_ideas = {
				remove_idea = GER_black_monday_6
				add_idea = GER_black_monday_7
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_7 }
			swap_ideas = {
				remove_idea = GER_black_monday_7
				add_idea = GER_black_monday_8
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_8 }
			swap_ideas = {
				remove_idea = GER_black_monday_8
				add_idea = GER_black_monday_9
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_9 }
			swap_ideas = {
				remove_idea = GER_black_monday_9
				add_idea = GER_black_monday_10
			}
		}
	}
}
GER_reduce_black_monday = {
	effect_tooltip = {
		swap_ideas = {
			remove_idea = GER_black_monday_3
			add_idea = GER_black_monday_2
		}
	}
	hidden_effect = {
		if = {
			limit = { has_idea = GER_black_monday_10 }
			swap_ideas = {
				remove_idea = GER_black_monday_10
				add_idea = GER_black_monday_9
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_9 }
			swap_ideas = {
				remove_idea = GER_black_monday_9
				add_idea = GER_black_monday_8
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_8 }
			swap_ideas = {
				remove_idea = GER_black_monday_8
				add_idea = GER_black_monday_7
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_7 }
			swap_ideas = {
				remove_idea = GER_black_monday_7
				add_idea = GER_black_monday_6
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_6 }
			swap_ideas = {
				remove_idea = GER_black_monday_6
				add_idea = GER_black_monday_5
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_5 }
			swap_ideas = {
				remove_idea = GER_black_monday_5
				add_idea = GER_black_monday_4
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_4 }
			swap_ideas = {
				remove_idea = GER_black_monday_4
				add_idea = GER_black_monday_3
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_3 }
			swap_ideas = {
				remove_idea = GER_black_monday_3
				add_idea = GER_black_monday_2
			}
		}
		else = {
			remove_ideas = GER_black_monday_2
		}
	}
}
GER_change_black_monday_to_debt_default = {
	hidden_effect = {
		if = {
			limit = { has_idea = GER_black_monday_10 }
			remove_ideas = GER_black_monday_10
			add_timed_idea = {
				idea = GER_removable_black_monday_10
				days = 365
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_9 }
			remove_ideas = GER_black_monday_9
			add_timed_idea = {
				idea = GER_removable_black_monday_9
				days = 365
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_8 }
			remove_ideas = GER_black_monday_8
			add_timed_idea = {
				idea = GER_removable_black_monday_8
				days = 365
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_7 }
			remove_ideas = GER_black_monday_7
			add_timed_idea = {
				idea = GER_removable_black_monday_7
				days = 365
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_6 }
			remove_ideas = GER_black_monday_6
			add_timed_idea = {
				idea = GER_removable_black_monday_6
				days = 365
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_5 }
			remove_ideas = GER_black_monday_5
			add_timed_idea = {
				idea = GER_removable_black_monday_5
				days = 365
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_4 }
			remove_ideas = GER_black_monday_4
			add_timed_idea = {
				idea = GER_removable_black_monday_4
				days = 365
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_3 }
			remove_ideas = GER_black_monday_3
			add_timed_idea = {
				idea = GER_removable_black_monday_3
				days = 365
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_2 }
			remove_ideas = GER_black_monday_2
			add_timed_idea = {
				idea = GER_removable_black_monday_2
				days = 365
			}
		}
	}
}
GER_change_black_monday_to_passively_removable = {
	hidden_effect = {
		if = {
			limit = { has_idea = GER_black_monday_10 }
			remove_ideas = GER_black_monday_10
			add_timed_idea = {
				idea = GER_disabled_black_monday_10
				days = 150
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_9 }
			remove_ideas = GER_black_monday_9
			add_timed_idea = {
				idea = GER_disabled_black_monday_9
				days = 150
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_8 }
			remove_ideas = GER_black_monday_8
			add_timed_idea = {
				idea = GER_disabled_black_monday_8
				days = 150
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_7 }
			remove_ideas = GER_black_monday_7
			add_timed_idea = {
				idea = GER_disabled_black_monday_7
				days = 150
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_6 }
			remove_ideas = GER_black_monday_6
			add_timed_idea = {
				idea = GER_disabled_black_monday_6
				days = 150
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_5 }
			remove_ideas = GER_black_monday_5
			add_timed_idea = {
				idea = GER_disabled_black_monday_5
				days = 150
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_4 }
			remove_ideas = GER_black_monday_4
			add_timed_idea = {
				idea = GER_disabled_black_monday_4
				days = 150
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_3 }
			remove_ideas = GER_black_monday_3
			add_timed_idea = {
				idea = GER_disabled_black_monday_3
				days = 150
			}
		}
		else_if = {
			limit = { has_idea = GER_black_monday_2 }
			remove_ideas = GER_black_monday_2
			add_timed_idea = {
				idea = GER_disabled_black_monday_2
				days = 150
			}
		}
	}
}
GER_improve_weltpolitik = {
	effect_tooltip = {
		swap_ideas = {
			remove_idea = GER_weltpolitik_2
			add_idea = GER_weltpolitik_3
		}
	}
	hidden_effect = {
		if = {
			limit = { has_idea = GER_weltpolitik_start }
			swap_ideas = {
				remove_idea = GER_weltpolitik_start
				add_idea = GER_weltpolitik_1
			}
		}
		else_if = {
			limit = { has_idea = GER_weltpolitik_1 }
			swap_ideas = {
				remove_idea = GER_weltpolitik_1
				add_idea = GER_weltpolitik_2
			}
		}
		else_if = {
			limit = { has_idea = GER_weltpolitik_2 }
			swap_ideas = {
				remove_idea = GER_weltpolitik_2
				add_idea = GER_weltpolitik_3
			}
		}
		else_if = {
			limit = { has_idea = GER_weltpolitik_3 }
			swap_ideas = {
				remove_idea = GER_weltpolitik_3
				add_idea = GER_weltpolitik_4
			}
		}
		else_if = {
			limit = { has_idea = GER_weltpolitik_4 }
			swap_ideas = {
				remove_idea = GER_weltpolitik_4
				add_idea = GER_weltpolitik_5
			}
		}
		else_if = {
			limit = { has_idea = GER_weltpolitik_5 }
			swap_ideas = {
				remove_idea = GER_weltpolitik_5
				add_idea = GER_weltpolitik_6
			}
		}
		else_if = {
			limit = { has_idea = GER_weltpolitik_6 }
			swap_ideas = {
				remove_idea = GER_weltpolitik_6
				add_idea = GER_weltpolitik_7
			}
		}
	}
}
GER_increase_agrarian = {
	if = {
		limit = { has_idea = GER_agrarian_1 }
		swap_ideas = {
			remove_idea = GER_agrarian_1
			add_idea = GER_agrarian_2
		}
	}
	else_if = {
		limit = { has_idea = GER_agrarian_2 }
		swap_ideas = {
			remove_idea = GER_agrarian_2
			add_idea = GER_agrarian_3
		}
	}
	else_if = {
		limit = { has_idea = GER_agrarian_3 }
		swap_ideas = {
			remove_idea = GER_agrarian_3
			add_idea = GER_agrarian_4
		}
	}
	else_if = {
		limit = { has_idea = GER_agrarian_4 }
		swap_ideas = {
			remove_idea = GER_agrarian_4
			add_idea = GER_agrarian_5
		}
	}
	else_if = {
		limit = { has_idea = GER_agrarian_5 }
		swap_ideas = {
			remove_idea = GER_agrarian_5
			add_idea = GER_agrarian_6
		}
	}
}
GER_increase_new_state = {
	if = {
		limit = { has_idea = GER_new_state_1 }
		swap_ideas = {
			remove_idea = GER_new_state_1
			add_idea = GER_new_state_2
		}
	}
	else_if = {
		limit = { has_idea = GER_new_state_2 }
		swap_ideas = {
			remove_idea = GER_new_state_2
			add_idea = GER_new_state_3
		}
	}
	else_if = {
		limit = { has_idea = GER_new_state_3 }
		swap_ideas = {
			remove_idea = GER_new_state_3
			add_idea = GER_new_state_4
		}
	}
	else_if = {
		limit = { has_idea = GER_new_state_4 }
		swap_ideas = {
			remove_idea = GER_new_state_4
			add_idea = GER_new_state_5
		}
	}
	else_if = {
		limit = { has_idea = GER_new_state_5 }
		swap_ideas = {
			remove_idea = GER_new_state_5
			add_idea = GER_new_state_6
		}
		custom_effect_tooltip = GER_new_state_paternal_autocrat_tt
	}
}
GER_increase_new_state_to_end = {
	if = {
		limit = {
			NOT = { has_idea = GER_new_state_6 }
		}
		remove_ideas = {
			GER_new_state_1
			GER_new_state_2
			GER_new_state_3
			GER_new_state_4
			GER_new_state_5
		}
		add_ideas = GER_new_state_6
	}
}
GER_improve_weltkrieg_legacy = {
	if = {
		limit = { has_idea = GER_victors_of_wwi }
		swap_ideas = {
			remove_idea = GER_victors_of_wwi
			add_idea = GER_victors_of_wwi_2
		}
	}
	else_if = {
		limit = { has_idea = GER_victors_of_wwi_2 }
		swap_ideas = {
			remove_idea = GER_victors_of_wwi_2
			add_idea = GER_victors_of_wwi_3
		}
	}
	else = {
		remove_ideas = GER_victors_of_wwi_3
	}
}

GER_wilhelm_ii_dies = {
	if = {
		limit = { GER = { GER_wilhelm_ii = { is_dead = no } } }
		GER = {
			GER_wilhelm_ii = {
				set_nationality = PREV #to avoid errors with the retire effect
				remove_all_country_leader_roles = yes #no need for these anymore, will only bloat the save
				kill_character = yes
			}
			GER_wilhelm_iii = {
				if = {
					limit = { is_retired = yes }
					set_nationality = PREV
					set_character_name = GER_wilhelm_iii_regnal
					retire = yes
				}
				else = {
					set_character_name = GER_wilhelm_iii_regnal
				}
			}
		}
	}
}

GER_create_wilhelm_ii = {
	if = {
		limit = { GER = { GER_wilhelm_ii = { is_dead = no } } }
		hidden_effect = { GER_create_wilhelm_iii = yes }
		GER = {
			GER_wilhelm_ii = {
				effect_tooltip = {
					meta_effect = {
						text = {
							add_country_leader_role = {
								country_leader = {
									desc = GER_wilhelm_ii_leader_desc
									ideology = [IDEOLOGY]
									traits = { GER_kaiser_of_old_world }
								}
								promote_leader = yes
							}
						}
						IDEOLOGY = "[PREV.GetRulingIdeologySubtype]"
					}
				}
				hidden_effect = {
					set_nationality = PREV.PREV
					remove_all_country_leader_roles = yes
					add_country_leader_role = {
						country_leader = {
							desc = GER_wilhelm_ii_leader_desc
							ideology = social_democrat_subtype
							traits = { GER_kaiser_of_old_world }
						}
						promote_leader = yes
					}
					add_country_leader_role = {
						country_leader = {
							desc = GER_wilhelm_ii_leader_desc
							ideology = social_liberal_subtype
							traits = { GER_kaiser_of_old_world }
						}
						promote_leader = yes
					}
					add_country_leader_role = {
						country_leader = {
							desc = GER_wilhelm_ii_leader_desc
							ideology = market_liberal_subtype
							traits = { GER_kaiser_of_old_world }
						}
						promote_leader = yes
					}
					add_country_leader_role = {
						country_leader = {
							desc = GER_wilhelm_ii_leader_desc
							ideology = social_conservative_subtype
							traits = { GER_kaiser_of_old_world }
						}
						promote_leader = yes
					}
					add_country_leader_role = {
						country_leader = {
							desc = GER_wilhelm_ii_leader_desc
							ideology = authoritarian_democrat_subtype
							traits = { GER_kaiser_of_old_world }
						}
						promote_leader = yes
					}
					add_country_leader_role = {
						country_leader = {
							desc = GER_wilhelm_ii_leader_desc
							ideology = paternal_autocrat_subtype
							traits = { GER_kaiser_of_old_world }
						}
						promote_leader = yes
					}
					add_country_leader_role = {
						country_leader = {
							desc = GER_wilhelm_ii_leader_desc
							ideology = national_populist_subtype
							traits = { GER_kaiser_of_old_world }
						}
						promote_leader = yes
					}
				}
			}
		}
	}
	else = {
		GER_create_wilhelm_iii = yes
	}
}

GER_create_wilhelm_iii = {
	GER = {
		GER_wilhelm_iii = {
			effect_tooltip = {
				meta_effect = {
					text = {
						add_country_leader_role = {
							country_leader = {
								desc = GER_wilhelm_iii_leader_desc
								ideology = [IDEOLOGY]
							}
							promote_leader = yes
						}
					}
					IDEOLOGY = "[PREV.GetRulingIdeologySubtype]"
				}
			}
			hidden_effect = {
				set_nationality = PREV.PREV
				if = {
					limit = { GER = { GER_wilhelm_ii = { is_dead = yes } } }
					set_character_name = GER_wilhelm_iii_regnal
				}
				remove_all_country_leader_roles = yes
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iii_leader_desc
						ideology = social_democrat_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iii_leader_desc
						ideology = social_liberal_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iii_leader_desc
						ideology = market_liberal_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iii_leader_desc
						ideology = social_conservative_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iii_leader_desc
						ideology = authoritarian_democrat_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iii_leader_desc
						ideology = paternal_autocrat_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iii_leader_desc
						ideology = national_populist_subtype
					}
					promote_leader = yes
				}
			}
		}
	}
}

GER_create_wilhelm_iv = {
	GER = {
		GER_wilhelm_iv = {
			effect_tooltip = {
				meta_effect = {
					text = {
						add_country_leader_role = {
							country_leader = {
								desc = GER_wilhelm_iv_leader_desc
								ideology = [IDEOLOGY]
							}
							promote_leader = yes
						}
					}
					IDEOLOGY = "[PREV.GetRulingIdeologySubtype]"
				}
			}
			hidden_effect = {
				set_nationality = PREV.PREV
				remove_all_country_leader_roles = yes
				set_character_as_monarch = yes
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iv_leader_desc
						ideology = social_democrat_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iv_leader_desc
						ideology = social_liberal_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iv_leader_desc
						ideology = market_liberal_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iv_leader_desc
						ideology = social_conservative_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iv_leader_desc
						ideology = authoritarian_democrat_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iv_leader_desc
						ideology = paternal_autocrat_subtype
					}
					promote_leader = yes
				}
				add_country_leader_role = {
					country_leader = {
						desc = GER_wilhelm_iv_leader_desc
						ideology = national_populist_subtype
					}
					promote_leader = yes
				}
			}
		}
	}
}

### CARD EFFECTS ###

GER_bm_cardgame_effects_apply = {
	GER_bm_cardgame_effects_calculate = yes
	GER_bm_cardgame_lines_calculate = yes

	GER_bm_cardgame_reform = yes

	GER_bm_cardgame_has_type = yes
	GER_bm_cardgame_has_tooltip = yes
	GER_bm_cardgame_has_custom_effect = yes
	GER_bm_cardgame_stability_apply = yes
	GER_bm_cardgame_investment_apply = yes
	GER_bm_cardgame_draw_effect_apply = yes
	GER_bm_draw_from_discard_effect_apply = yes
	GER_bm_cardgame_debt_effect_apply = yes
	GER_bm_cardgame_discard_remove = yes

	custom_effect_tooltip = GER_card_back_tt

	hidden_effect = {
		scoped_sound_effect = construction
	}
}

GER_bm_cardgame_effects_calculate = {

	GER_bm_cardgame_basic_stats_calculate = yes

	if = { #This is for complex cards that might do more funny things... Will overwrite "basic effects". Put line calculation math here if you like, too!
		limit = {
			var:GER_card_played = {
				has_character_flag = custom_card_calculations
			}
		}
		meta_effect = {
			text = {
				[CARD]_calculate = yes
			}
			CARD = "[?GER_card_played:card_id.GetName]"
		}
	}
}

GER_bm_cardgame_basic_stats_calculate = {
	var:GER_card_played = {
		if = {
			limit = {
				has_variable = card_investment_value
			}
			set_temp_variable = { GER_investment_effect = 1 }
			add_to_temp_variable = { GER_investment_effect = GER.GER_investment_bonus_factor }
			add_to_temp_variable = { GER_investment_effect = GER.GER_investment_perm_bonus_factor }
			multiply_temp_variable = { GER_investment_effect = card_investment_value }
		}
		if = {
			limit = {
				has_variable = card_stability_value
			}
			set_temp_variable = { GER_stability_effect = 1 }
			add_to_temp_variable = { GER_stability_effect = GER.GER_stability_bonus_factor }
			add_to_temp_variable = { GER_stability_effect = GER.GER_stability_perm_bonus_factor }
			multiply_temp_variable = { GER_stability_effect = card_stability_value }
		}
		if = {
			limit = {
				has_variable = card_draw_value
			}
			set_temp_variable = { GER_cards_to_draw = card_draw_value }
		}
		if = {
			limit = {
				has_variable = card_draw_from_discard
			}
			set_temp_variable = { GER_cards_to_draw_from_discard = card_draw_from_discard }
		}
		if = {
			limit = {
				has_variable = card_debt_value
			}
			set_temp_variable = { GER_debt_effect = card_debt_value }
		}
	}

	if = {
		limit = {
			check_variable = { GER_crisis_id = GER_card_played:GER_card_type }
		}

		multiply_temp_variable = { GER_investment_effect = 1.5 }
		multiply_temp_variable = { GER_stability_effect = 1.5 }
		set_temp_variable = { GER_bm_cardgame_line_number_extra = GER_card_played:card_lines_for_tt_extra }
	}
	if = {
		limit = {
			check_variable = { GER_bm_cardgame_discard_array^num < GER_cards_to_draw_from_discard }
		}
		set_temp_variable = { GER_bm_cardgame_line_number_extra = GER_card_played:card_lines_for_tt_extra }
	}
}

GER_bm_cardgame_fireside_chat_calculate = {

	if = {
		limit = {
			has_country_flag = GER_played_reform_card_this_turn
		}
		set_temp_variable = { extra_lines_for_tt = 1 }
	}
}

GER_bm_cardgame_eastern_assistance_calculate = {

	set_temp_variable = { GER_number_of_mee_countries = 0 }
	if = {
		limit = {
			BAT = {
				GER_is_in_mitteleuropa = yes
			}
		}
		add_to_temp_variable = { GER_number_of_mee_countries = 1 }
	}
	if = {
		limit = {
			LIT = {
				GER_is_in_mitteleuropa = yes
			}
		}
		add_to_temp_variable = { GER_number_of_mee_countries = 1 }
	}
	if = {
		limit = {
			POL = {
				GER_is_in_mitteleuropa = yes
			}
		}
		add_to_temp_variable = { GER_number_of_mee_countries = 1 }
	}
	if = {
		limit = {
			BLR = {
				GER_is_in_mitteleuropa = yes
			}
		}
		add_to_temp_variable = { GER_number_of_mee_countries = 1 }
	}
	if = {
		limit = {
			UKR = {
				GER_is_in_mitteleuropa = yes
			}
		}
		add_to_temp_variable = { GER_number_of_mee_countries = 1 }
	}
	if = {
		limit = {
			EST = {
				GER_is_in_mitteleuropa = yes
			}
		}
		add_to_temp_variable = { GER_number_of_mee_countries = 1 }
	}
	if = {
		limit = {
			FIN = {
				GER_is_in_mitteleuropa = yes
			}
		}
		add_to_temp_variable = { GER_number_of_mee_countries = 1 }
	}
	if = {
		limit = {
			GEO = {
				GER_is_in_mitteleuropa = yes
			}
		}
		add_to_temp_variable = { GER_number_of_mee_countries = 1 }
	}

	set_temp_variable = { GER_investment_effect = 1 }
	add_to_temp_variable = { GER_investment_effect = GER_investment_bonus_factor }
	add_to_temp_variable = { GER_investment_effect = GER_investment_perm_bonus_factor }
	multiply_temp_variable = { GER_investment_effect = GER_card_played:card_investment_value }
	multiply_temp_variable = { GER_investment_effect = GER_number_of_mee_countries }

	set_temp_variable = { GER_stability_effect = GER_card_played:card_stability_value }
	multiply_temp_variable = { GER_stability_effect = GER_number_of_mee_countries }

	set_temp_variable = { GER_stability_effect = 1 }
	add_to_temp_variable = { GER_stability_effect = GER_stability_bonus_factor }
	add_to_temp_variable = { GER_stability_effect = GER_stability_perm_bonus_factor }
	multiply_temp_variable = { GER_stability_effect = GER_card_played:card_stability_value }
	multiply_temp_variable = { GER_stability_effect = GER_number_of_mee_countries }
}

GER_bm_cardgame_rathenauplan_calculate = {

	set_temp_variable = { GER_cards_to_draw = GER_rathenauplan_draw }
}

GER_bm_cardgame_tbplan_calculate = {

	set_temp_variable = { GER_cards_to_draw = GER_tbplan_draw }
}

GER_bm_cardgame_corporate_assistance_calculate = {
	if = {
		limit = {
			check_variable = { GER_bm_cardgame_discard_array^num < GER_cards_to_draw_from_discard }
		}

		add_to_temp_variable = { extra_lines_for_tt = 2 }
	}
}

GER_bm_trade_union_collaboration_calculate = {
	set_temp_variable = { GER_trade_union_dealt = GER_investment }
	multiply_temp_variable = { GER_trade_union_dealt = 0.5 }

	set_temp_variable = { GER_stability_effect = GER_trade_union_dealt }
}

GER_bm_cardgame_lines_calculate = {

	if = {
		limit = {
			NOT = {
				has_variable = GER_bm_cardgame_line_number # can be set in a custom calculation...
			}
		}

		set_temp_variable = { GER_bm_cardgame_line_number = GER_card_played:card_lines_for_tt }
		add_to_temp_variable = { GER_bm_cardgame_line_number = GER_card_played:GER_bm_cardgame_line_number_extra }
		add_to_temp_variable = { GER_bm_cardgame_line_number = extra_lines_for_tt } # can be setup in _calculate scripted effect

		meta_effect = {
			text = {
				custom_effect_tooltip = GER_card_front_[LINES]_tt
			}
			LINES = "[?GER_bm_cardgame_line_number]"
		}
	}
}

GER_bm_cardgame_reform = {

	if = {
		limit = {
			var:GER_card_played = {
				has_character_flag = reform_card
			}
		}
		GER_bm_cardgame_add_reform_to_array = yes
		set_country_flag = GER_played_reform_card_this_turn
		custom_effect_tooltip = GER_reform_card_tt
		#add_reform_to_array = yes
	}
}

GER_bm_cardgame_add_reform_to_array = {
	var:GER_card_played = {
		add_to_array = { GER.GER_reforms_array = THIS }
	}
}

GER_bm_cardgame_discard_remove = {
	if = {
		limit = {
			var:GER_card_played = {
				has_character_flag = remove_after_play
			}
		}

		set_temp_variable = { GER_card_removed = GER_card_played }
		GER_bm_card_remove = yes

	}
	else = {
		set_temp_variable = { GER_card_discarded = GER_card_played }
		GER_bm_card_discard = yes
	}
}

GER_bm_cardgame_has_type = {
	if = {
		limit = {
			check_variable = { GER_card_played:GER_card_type = GER_crisis_id }
		}
		custom_effect_tooltip = GER_relief_card_tt
		custom_effect_tooltip = GER_card_type_bonus_tt
	}
	else_if = {
		limit = {
			var:GER_card_played = {
				has_variable = GER_card_type
			}
		}
		custom_effect_tooltip = GER_relief_card_tt
	}
	else_if = {
		limit = {
			NOT = {
				var:GER_card_played = {
					has_character_flag = reform_card
				}
			}
		}
		custom_effect_tooltip = GER_recovery_card_tt
	}
}

GER_bm_cardgame_has_tooltip = {
	if = {
		limit = {
			var:GER_card_played = {
				has_character_flag = custom_card_tooltip
			}
		}
		meta_effect = {
			text = {
				custom_effect_tooltip = [CARD]_tt
			}
			CARD = "[?GER_card_played:card_id.GetName]"
		}
	}
}

GER_bm_cardgame_has_custom_effect = {
	if = {
		limit = {
			var:GER_card_played = {
				has_character_flag = custom_card_effect
			}
		}
		meta_effect = {
			text = {
				[CARD]_effect = yes
			}
			CARD = "[?GER_card_played:card_id.GetName]"
		}
	}
}

GER_bm_cardgame_stability_apply = {
	if = {
		limit = {
			has_variable = GER_stability_effect
		}

		add_to_variable = { GER_stability = GER_stability_effect tooltip = GER_stability_increase_tt }
	}
	if = {
		limit = {
			has_variable = GER_card_played
			var:GER_card_played = { has_character_flag = GER_economic_planning_played }
		}
		custom_effect_tooltip = GER_economic_planning_played_stab_effect_tt
	}
}

GER_bm_cardgame_investment_apply = {
	if = {
		limit = {
			has_variable = GER_investment_effect
		}

		add_to_variable = { GER_investment = GER_investment_effect tooltip = GER_investment_increase_tt }
	}
	if = {
		limit = {
			has_variable = GER_card_played
			var:GER_card_played = { has_character_flag = GER_economic_planning_played }
		}
		custom_effect_tooltip = GER_economic_planning_played_inv_effect_tt
	}
}

GER_bm_cardgame_debt_effect_apply = {

	if = {
		limit = {
			has_variable = GER_debt_effect
		}
		add_to_variable = { GER_debt = GER_debt_effect tooltip = GER_debt_increase_tt }
	}
}

GER_bm_cardgame_draw_effect_apply = {
	if = {
		limit = {
			has_variable = GER_cards_to_draw
		}

		GER_bm_cardgame_draw = yes
	}
}

GER_bm_draw_from_discard_effect_apply = {
	if = {
		limit = {
			has_variable = GER_cards_to_draw_from_discard
		}

		GER_bm_card_draw_from_discard = yes
	}
}

GER_bm_cardgame_economic_planning_effect = {
	hidden_effect = {
		for_each_scope_loop = {
			array = GER.GER_cardgame_object_array
			if = {
				limit = { check_variable = { GER_card_type = 3 } }
				set_character_flag = GER_economic_planning_played
				add_to_variable = { card_lines_for_tt = 4 }
				add_to_variable = { card_investment_value = 750 }
				add_to_variable = { card_stability_value = 750 }
			}
		}
	}
}

GER_bm_cardgame_reichsbank_analysis_effect = {
	hidden_effect = {
		if = {
			limit = {
				check_variable = { GER_crisis_id = 1 }
			}
			random_list = {
				50 = {
					set_variable = { GER_crisis_id = 2 }
				}
				50 = {
					set_variable = { GER_crisis_id = 3 }
				}
			}
		}
		else_if = {
			limit = {
				check_variable = { GER_crisis_id = 2 }
			}
			random_list = {
				50 = {
					set_variable = { GER_crisis_id = 1 }
				}
				50 = {
					set_variable = { GER_crisis_id = 3 }
				}
			}
		}
		else = {
			random_list = {
				50 = {
					set_variable = { GER_crisis_id = 1 }
				}
				50 = {
					set_variable = { GER_crisis_id = 2 }
				}
			}
		}
	}
}

GER_bm_cardgame_price_monitoring_effect = {
	add_to_variable = { GER_stability_perm_bonus_factor = 0.2 tooltip = GER_stability_bonus_factor_tt }
}

GER_bm_cardgame_technocratic_thinking_effect = {

	set_country_flag = GER_technocratic_thinking_card_effect

}

GER_bm_cardgame_administrative_reform_effect = {
	add_to_variable = { GER_investment_bonus_factor = 0.25 }
}

GER_bm_cardgame_nationalisation_of_foreign_companies_effect = {
	add_to_variable = { GER_stability_bonus_factor = 0.25 }
}

GER_bm_cardgame_fireside_chat_effect = {

	if = {
		limit = {
			has_country_flag = GER_played_reform_card_this_turn
		}

		multiply_variable = { GER_investment = 1.5 }
		multiply_variable = { GER_stability = 1.5 }

		custom_effect_tooltip = GER_bm_cardgame_fireside_chat_tt
	}
	else = {
		custom_effect_tooltip = GER_bm_cardgame_fireside_chat_tt_no_effect

	}
}

GER_bm_cardgame_turn_end = {

	for_each_scope_loop = {
		array = GER_bm_cardgame_cards_array
		clear_variable = cards_drawn # clear count of drawn cards
		clear_variable = copies_in_discard # clear count of discarded cards
	}
	clear_array = GER_bm_cardgame_cards_drawn_array # remove any unplayed cards from last hand
	clear_array = GER_bm_cardgame_discard_array # remove all discarded cards
	clr_country_flag = GER_played_reform_card_this_turn # clear reform card flag

	# Played card Inst. Public Works - gain atk / def for each constructed building
	if = {
		limit = {
			has_country_flag = GER_institutional_public_works_played
		}
		GER_economic_planning_card_counted = yes
		GER_economic_planning_card_begin_counting = yes
	}

	# Played card Fed. Income Taxes - reduce debt by 5 every turn
	if = {
		limit = {
			has_country_flag = GER_federal_income_taxes_played
		}
		add_to_variable = { GER_debt = -5 tooltip = GER_debt_decrease_focus_tt }
	}

	# Debt 200% or above - debt default
	if = {
		limit = {
			check_variable = { GER_debt > 199 }
		}
		if = {
			limit = {
				is_ai = yes # AI going bankrupt fixes Black Monday! It's an (economic) miracle!
			}
			set_variable = { GER_economic_health = -1 }
			remove_ideas = {
				GER_black_monday_10
				GER_black_monday_9
				GER_black_monday_8
				GER_black_monday_7
				GER_black_monday_6
				GER_black_monday_5
				GER_black_monday_4
				GER_black_monday_3
				GER_black_monday_2
			}
			country_event = gerblack.10
		}
		else = {
			custom_effect_tooltip = GER_debt_default_incoming_tt
			hidden_effect = { country_event = gerblack.8 }
		}
	}
	# Check round results
	else_if = {
		limit = {
			check_variable = { var = GER_investment value = GER_stagnation compare = greater_than_or_equals }
			check_variable = { var = GER_stability value = GER_economic_decline compare = greater_than_or_equals }
		}
		custom_effect_tooltip = GER_bm_turn_victory_tt
		if = {
			limit = {
				check_variable = { GER_economic_health < -1 }
			}
			add_to_variable = { GER_economic_health = 1 }
			GER_reduce_black_monday = yes
			#Variables needed to easily display economic health effects
			add_to_variable = { GER_consumer_goods_loss = -0.05 }
			add_to_variable = { GER_factory_output_loss = 0.05 }
			add_to_variable = { GER_building_production_loss = 0.05 }
			add_to_variable = { GER_max_efficiency_loss = 0.05 }
		}
		if = {
			limit = {
				has_country_flag = GER_ruhrkampf_begun
			}
			subtract_from_variable = { # Measures strength. Need to be 25-75 at the end of each Ruhrkampf turn
				var = GER_ruhrkampf_strength
				value = 10
				tooltip = GER_ruhrkampf_reduced
			}
			clamp_variable = { var = GER_ruhrkampf_strength max = 100 min = 0 }
		}
		if = {
			limit = {
				GER_is_du_path = yes
			}
			add_days_mission_timeout = {
				mission = GER_SPD_demand_action
				days = 30
			}
		}
		#Adjust crisis variables. Each variable starts at 2500 at the start of the game. There is a 50% chance that it increases by 250 at the end of the turn.
		hidden_effect = {
			random_list = {
				25 = {
					add_to_variable = { GER_economic_decline = 500 }
				}
				50 = {
					add_to_variable = { GER_economic_decline = 250 }
				}
				25 = {
					# nothing
				}
			}
			random_list = {
				25 = {
					add_to_variable = { GER_stagnation = 500 }
				}
				50 = {
					add_to_variable = { GER_stagnation = 250 }
				}
				25 = {
					# nothing
				}
			}
		}
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { var = GER_investment value = GER_stagnation compare = greater_than_or_equals }
				check_variable = { var = GER_stability value = GER_economic_decline compare = greater_than_or_equals }
			}
		}
		#Adjust crisis variables. Each variable starts at 2500 at the start of the game. There is a 25% chance that it increases by 250 at the end of the turn.
		hidden_effect = {
			random_list = {
				75 = {
					add_to_variable = { GER_economic_decline = 250 }
				}
				25 = {
					# nothing
				}
			}
			random_list = {
				75 = {
					add_to_variable = { GER_stagnation = 250 }
				}
				25 = {
					# nothing
				}
			}
		}
		custom_effect_tooltip = GER_bm_turn_stall_tt
	}
	else = {
		custom_effect_tooltip = GER_bm_turn_defeat_tt
		if = {
			limit = {
				check_variable = { GER_economic_health > -10 }
			}
			add_to_variable = { GER_economic_health = -1 }
			GER_increase_black_monday = yes
			#Variables needed to easily display economic health effects
			add_to_variable = { GER_consumer_goods_loss = 0.05 }
			add_to_variable = { GER_factory_output_loss = -0.05 }
			add_to_variable = { GER_building_production_loss = -0.05 }
			add_to_variable = { GER_max_efficiency_loss = -0.05 }
		}
		if = {
			limit = {
				has_country_flag = GER_ruhrkampf_begun
			}
			add_to_variable = { # Measures strength. Need to be 25-75 at the end of each Ruhrkampf turn
				var = GER_ruhrkampf_strength
				value = 10
				tooltip = GER_ruhrkampf_raised
			}
			clamp_variable = { var = GER_ruhrkampf_strength max = 100 min = 0 }
		}
		#Adjust crisis variables. Each variable starts at 2500 at the start of the game. There is a 50% chance that it reduces by 250 at the end of the turn.
		hidden_effect = {
			random_list = {
				25 = {
					add_to_variable = { GER_economic_decline = -250 }
				}
				75 = {
					# nothing
				}
			}
			random_list = {
				25 = {
					add_to_variable = { GER_stagnation = -250 }
				}
				75 = {
					# nothing
				}
			}
		}
	}

	# If you have removed BM - event to turn off the mechanic
	if = {
		limit = {
			check_variable = { GER_economic_health > -2 }
		}
		hidden_effect = {
			country_event = gerblack.10
		}
	}
	else = {
		#reset game variables
		set_variable = { GER_investment = 0 }
		set_variable = { GER_stability = 0 }
		set_variable = { GER_stability_bonus_factor = 0 }
		set_variable = { GER_investment_bonus_factor = 0 }

		#increase num of rounds
		add_to_variable = { GER_bm_game_rounds = 1 }

		#generate new crisis type, this could be done in a more clever system but for now just RNG works
		hidden_effect = {
			random_list = {
				33 = {
					set_variable = { GER_crisis_id = 1 } # no money?
				}
				33 = {
					set_variable = { GER_crisis_id = 2 } # no fiscal stability?
				}
				33 = {
					set_variable = { GER_crisis_id = 3 } # no employment?
				}
			}
		}

		#THIS SHOULD BE MADE TO "DRAW ENOUGH CARDS UNTIL YOU GET 6"
		if = {
			limit = {
				has_country_flag = GER_technocratic_thinking_card_effect
			}
			set_temp_variable = { GER_cards_to_draw = 6 }
			subtract_from_temp_variable = { GER_cards_to_draw = GER_bm_cardgame_cards_drawn_array^num }
			clamp_temp_variable = { var = GER_cards_to_draw min = 0 max = 6 }
		}
		else = {
			set_temp_variable = { GER_cards_to_draw = 5 }
			subtract_from_temp_variable = { GER_cards_to_draw = GER_bm_cardgame_cards_drawn_array^num }
			clamp_temp_variable = { var = GER_cards_to_draw min = 0 max = 5 }
		}
		custom_effect_tooltip = GER_bm_card_draw_tt
		hidden_effect = {
			GER_bm_cardgame_draw = yes
			GER_set_bm_turn_timer = yes
			country_event = gerblack.12
		}
	}
}

# draws cards from the deck without replacement with temp var argument GER_cards_to_draw
GER_bm_cardgame_draw = {

	#create counter of available cards
	set_temp_variable = { total_available_cards = 0 }

	if = {
		limit = {
			#build temp array of applicable cards
			all_of_scopes = {
				array = GER_bm_cardgame_cards_array
				if = {
					#if a card was played to fire this effect, prevent infinite draw loop exploits
					limit = { NOT = { check_variable = { GER_card_played = THIS } } }

					#check if there are any available cards to draw from the deck
					set_temp_variable = { available_cards = total_copies }
					subtract_from_temp_variable = { available_cards = cards_drawn }
					subtract_from_temp_variable = { available_cards = copies_in_discard }
					if = {
						limit = { check_variable = { available_cards > 0 } }
						add_to_temp_array = { GER_bm_cardgame_cards_array_to_draw_from = THIS }
					}

					#add available cards to counter
					add_to_temp_variable = { total_available_cards = available_cards }
				}
			}

			#check if there are any available
			check_variable = { total_available_cards > 0 }
		}

		#variable bounds
		clamp_temp_variable = { var = GER_cards_to_draw min = 1 max = total_available_cards }
		custom_effect_tooltip = GER_bm_card_draw_tt

		while_loop_effect = {
			limit = { check_variable = { GER_cards_to_draw > 0 } }

			#output uses max - 1, so the interval is [0, GER_bm_cardgame_cards_array_to_draw_from^num]
			set_temp_variable_to_random = {
				var = GER_card_drawn_index
				min = 0
				max = GER_bm_cardgame_cards_array_to_draw_from^num
				integer = yes
			}

			var:GER_bm_cardgame_cards_array_to_draw_from^GER_card_drawn_index = {
				log = "[THIS.GetName] set as card to be drawn"
				add_to_variable = { cards_drawn = 1 }
				if = {
					limit = { NOT = { is_in_array = { PREV.GER_bm_cardgame_cards_drawn_array = THIS } } }
					add_to_array = { PREV.GER_bm_cardgame_cards_drawn_array = THIS }
				}

				#remove from discard pile if applicable
				if = {
					limit = { is_in_array = { PREV.GER_bm_cardgame_discard_array = THIS } }
					add_to_variable = { copies_in_discard = -1 }
					if = {
						limit = { check_variable = { copies_in_discard < 1 } }
						remove_from_array = { PREV.GER_bm_cardgame_cards_drawn_array = THIS }
					}
				}

				#if all copies were drawn, ignore this one from in subsequent loops
				set_temp_variable = { available_cards = total_copies }
				subtract_from_temp_variable = { available_cards = cards_drawn }
				subtract_from_temp_variable = { available_cards = copies_in_discard }
				if = {
					limit = { NOT = { check_variable = { available_cards > 0 } } }
					remove_from_temp_array = { GER_bm_cardgame_cards_array_to_draw_from = THIS }
				}
			}

			subtract_from_temp_variable = { GER_cards_to_draw = 1 }
		}
	}
	else = {
		custom_effect_tooltip = GER_bm_card_draw_fail_tt
	}
}

GER_bm_card_draw_from_discard = {

	if = {
		limit = {
			check_variable = { GER_bm_cardgame_discard_array^num < GER_cards_to_draw_from_discard }
		}
		custom_effect_tooltip = GER_bm_card_draw_discard_fail_tt
	}
	else = {

		custom_effect_tooltip = GER_bm_card_draw_discard_tt

		while_loop_effect = {
			limit = {
				check_variable = { GER_cards_to_draw_from_discard > 0 }
			}

			set_temp_variable = { GER_card_discard_num_max = GER_bm_cardgame_discard_array^num }
			add_to_temp_variable = { GER_card_discard_num_max = -1 }

			randomize_temp_variable = {
				var = GER_card_from_discard_index
				distribution = uniform
				min = 0
				max = GER_card_discard_num_max
			}

			set_temp_variable = { GER_card_from_discard_card = GER_bm_cardgame_discard_array^GER_card_from_discard_index }
			remove_from_array = { GER_bm_cardgame_discard_array = GER_card_from_discard_card }

			add_to_array = { GER_bm_cardgame_cards_drawn_array = GER_card_from_discard_card }
			var:GER_card_from_discard_card = {
				add_to_variable = { cards_drawn = 1 }
				add_to_variable = { copies_in_discard = -1 }
			}

			subtract_from_temp_variable = { GER_cards_to_draw_from_discard = 1 }
		}
	}
}

GER_bm_card_discard = {
	if = {
		limit = { is_in_array = { GER_bm_cardgame_cards_drawn_array = GER_card_discarded } }
		remove_from_array = { GER_bm_cardgame_cards_drawn_array = GER_card_discarded }
	}
	if = {
		limit = { NOT = { is_in_array = { GER_bm_cardgame_discard_array = GER_card_discarded } } }
		add_to_array = { GER_bm_cardgame_discard_array = GER_card_discarded }
	}
	var:GER_card_discarded = {
		add_to_variable = { cards_drawn = -1 }
		add_to_variable = { copies_in_discard = 1 }
	}
}

GER_bm_card_remove = {
	if = {
		limit = { is_in_array = { GER_bm_cardgame_cards_drawn_array = GER_card_removed } }
		remove_from_array = { GER_bm_cardgame_cards_drawn_array = GER_card_removed }
	}
	if = {
		limit = { is_in_array = { GER_bm_cardgame_cards_array = GER_card_removed } }
		remove_from_array = { GER_bm_cardgame_cards_array = GER_card_removed }
	}
	custom_effect_tooltip = GER_bm_card_remove_tt

	var:GER_card_removed = {
		add_to_variable = { cards_drawn = -1 }
		add_to_variable = { total_copies = -1 }
	}
}

GER_bm_card_add = {
	if = {
		limit = { NOT = { is_in_array = { GER_bm_cardgame_cards_array = GER_card_added } } }
		add_to_array = { GER_bm_cardgame_cards_array = GER_card_added }
	}
	var:GER_card_added = {
		add_to_variable = { total_copies = 1 } #doing this is not super elegeant but it should work pretty well - too lazy to refactor draw logic properly...
	}

	meta_effect = {
		text = {
			custom_effect_tooltip = "[GER_CARD_ID]_add_tt"
		}
		GER_CARD_ID = "[?GER_card_added:card_id.GetName]"
	}
}

GER_set_bm_turn_timer = {
	#turns are 15 days, plus 15 for each economic health level above -10
	set_variable = { GER_bm_game_turn_timer_days = 10 }
	add_to_variable = { GER_bm_game_turn_timer_days = GER_economic_health }
	multiply_variable = { GER_bm_game_turn_timer_days = 15 }
	add_to_variable = { GER_bm_game_turn_timer_days = 15 }

	activate_mission = GER_bm_cardgame_turn_timer
}

GER_bm_game_end = {

	#variable and array cleanup
	for_each_scope_loop = {
		array = GER_bm_cardgame_cards_array

		clear_variable = cards_drawn
		clear_variable = copies_in_discard
	}
	clear_array = GER_bm_cardgame_cards_array
	clear_array = GER_bm_cardgame_cards_drawn_array
	clear_array = GER_bm_cardgame_discard_array

	#disable turn timer
	remove_mission = GER_bm_cardgame_turn_timer

	#disable ALL card decisions
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_money_issuance_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_capital_controls_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_employment_programme_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_cooperation_business_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_fireside_chat_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_eastern_assistance_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_price_monitoring_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_rathenauplan_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_tbplan_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_arbeitsdienst_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_land_improvement_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_corporate_assistance_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_institutional_public_works_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_import_tariffs_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_economic_planning_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_mitteleuropa_loans_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_administrative_reform_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_nationalisation_of_foreign_companies_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_trade_union_collaboration_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_strategic_tax_hikes_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_price_depression_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_money_issuance_large_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_fiscal_austerity_decision }
	remove_targeted_decision = { target = GER decision = GER_bm_cardgame_federal_income_taxes_decision }
}
GER_economic_planning_card_begin_counting = {
	set_variable = { GER_BM_factory_count = total_constructed_civilian_factory }
	add_to_variable = { GER_BM_factory_count = total_constructed_military_factory }
	add_to_variable = { GER_BM_factory_count = total_constructed_dockyard }
	add_to_variable = { GER_BM_factory_count = total_constructed_refinery }
	add_to_variable = { GER_BM_factory_count = total_constructed_fuel_silo }
}
GER_economic_planning_card_counted = {
	set_temp_variable = { GER_num_buildings_built_on_round = total_constructed_civilian_factory }
	add_to_temp_variable = { GER_num_buildings_built_on_round = total_constructed_military_factory }
	add_to_temp_variable = { GER_num_buildings_built_on_round = total_constructed_dockyard }
	add_to_temp_variable = { GER_num_buildings_built_on_round = total_constructed_refinery }
	add_to_temp_variable = { GER_num_buildings_built_on_round = total_constructed_fuel_silo }
	subtract_from_temp_variable = { GER_num_buildings_built_on_round = GER_BM_factory_count }

	custom_effect_tooltip = GER_institutional_public_works_card_counted_tt
	set_temp_variable = { GER_investment_effect = 200 }
	multiply_temp_variable = { GER_investment_effect = GER_num_buildings_built_on_round }
	GER_bm_cardgame_investment_apply = yes

	set_temp_variable = { GER_stability_effect = 200 }
	multiply_temp_variable = { GER_stability_effect = GER_num_buildings_built_on_round }
	GER_bm_cardgame_stability_apply = yes
}

GER_initialize_bm_game = {

	custom_effect_tooltip = GER_initialise_bm_game_tt

	# VERY SANE WORKAROUND :pdx:
	hidden_effect = {
		GER_set_bm_turn_timer = yes
		set_temp_variable = { GER_card_added = GER_bm_cardgame_money_issuance_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = GER_bm_cardgame_capital_controls_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = GER_bm_cardgame_employment_programme_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = GER_bm_cardgame_cooperation_business_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = GER_bm_cardgame_cooperation_business_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = GER_bm_cardgame_reichsbank_analysis_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = GER_bm_cardgame_fireside_chat_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = GER_bm_cardgame_eastern_assistance_object }
		GER_bm_card_add = yes
		set_temp_variable = { GER_card_added = GER_bm_cardgame_price_monitoring_object }
		GER_bm_card_add = yes
	}

	set_variable = { GER_stability_bonus_factor = 0 }
	set_variable = { GER_stability_perm_bonus_factor = 0 }
	set_variable = { GER_investment_bonus_factor = 0 }
	set_variable = { GER_investment_perm_bonus_factor = 0 }

	set_temp_variable = { GER_cards_to_draw = 5 }
	custom_effect_tooltip = GER_bm_card_draw_tt

	hidden_effect = {
		GER_bm_cardgame_draw = yes
		activate_targeted_decision = { target = THIS decision = GER_bm_cardgame_money_issuance_decision }
		activate_targeted_decision = { target = THIS decision = GER_bm_cardgame_capital_controls_decision }
		activate_targeted_decision = { target = THIS decision = GER_bm_cardgame_employment_programme_decision }
		activate_targeted_decision = { target = THIS decision = GER_bm_cardgame_cooperation_business_decision }
		activate_targeted_decision = { target = THIS decision = GER_bm_cardgame_reichsbank_analysis_decision }
		activate_targeted_decision = { target = THIS decision = GER_bm_cardgame_fireside_chat_decision }
		activate_targeted_decision = { target = THIS decision = GER_bm_cardgame_eastern_assistance_decision }
		activate_targeted_decision = { target = THIS decision = GER_bm_cardgame_price_monitoring_decision }
	}
}

check_cards_in_drawn_array = {
	for_each_scope_loop = {
		array = GER_bm_cardgame_cards_drawn_array

		log = "[THIS.GETNAME] is in drawn array"
	}
}

check_cards_in_deck_array = {
	for_each_scope_loop = {
		array = GER_bm_cardgame_cards_array

		log = "[THIS.GETNAME] is in deck array"
	}
}

check_reform_in_array = {
	log = "[?GER_reforms_array^0] is first value in array"
}

add_reform_to_array = {
	add_to_array = { GER_reforms_array = 1 }
}

clear_reform_array = {
	clear_array = GER_reforms_array
}

GER_democratic_union_alignment_effect = {
	custom_effect_tooltip = GER_reichstag_faction_alignment_turn_tt
	if = {
		limit = {
			check_variable = { GER_LVP_seats_l > 0 }
			3 = { GER_is_possible_reichstag_target = yes } # Target LVP (L)
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 3.id }
			}
			custom_effect_tooltip = GER_lvpl_target_du_win
		}
		else = {
			custom_effect_tooltip = GER_lvpl_target_du_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_LVP_seats_r > 0 }
			is_in_array = { GER.democratic_union_members_array = 3.id }
			4 = { GER_is_possible_reichstag_target = yes } # Target LVP (R)
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 4.id }
			}
			custom_effect_tooltip = GER_lvpr_target_du_win
		}
		else = {
			custom_effect_tooltip = GER_lvpr_target_du_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_liberal_seats_r > 0 }
			is_in_array = { GER.democratic_union_members_array = 4.id }
			6 = { GER_is_possible_reichstag_target = yes } # Target Minor Liberals
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 6.id }
			}
			custom_effect_tooltip = GER_liberal_target_du_win
		}
		else = {
			custom_effect_tooltip = GER_liberal_target_du_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_polish_seats_r > 0 }
			7 = { GER_is_possible_reichstag_target = yes } # Target Poles
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 7.id }
			}
			custom_effect_tooltip = GER_polish_target_du_win
		}
		else = {
			custom_effect_tooltip = GER_polish_target_du_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_Zentrum_seats_l > 0 }
			8 = { GER_is_possible_reichstag_target = yes } # Target Zentrum (L)
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 8.id }
			}
			custom_effect_tooltip = GER_zentruml_target_du_win
		}
		else = {
			custom_effect_tooltip = GER_zentruml_target_du_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_Zentrum_seats_c > 0 }
			is_in_array = { GER.democratic_union_members_array = 8.id }
			9 = { GER_is_possible_reichstag_target = yes } # Target Zentrum (C)
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 9.id }
			}
			custom_effect_tooltip = GER_zentrumc_target_du_win
		}
		else = {
			custom_effect_tooltip = GER_zentrumc_target_du_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_Zentrum_seats_r > 0 }
			is_in_array = { GER.democratic_union_members_array = 9.id }
			10 = { GER_is_possible_reichstag_target = yes } # Target Zentrum (R)
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 10.id }
			}
			custom_effect_tooltip = GER_zentrumr_target_du_win
		}
		else = {
			custom_effect_tooltip = GER_zentrumr_target_du_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_Guelph_seats_r > 0 }
			is_in_array = { GER.democratic_union_members_array = 9.id }
			5 = { GER_is_possible_reichstag_target = yes } # Target Guelphs
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 5.id }
			}
			custom_effect_tooltip = GER_guelph_target_du_win
		}
		else = {
			custom_effect_tooltip = GER_guelph_target_du_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_agrarian_seats_r > 0 }
			is_in_array = { GER.democratic_union_members_array = 9.id }
			11 = { GER_is_possible_reichstag_target = yes } # Target Agrarians
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 11.id }
			}
			custom_effect_tooltip = GER_agrarian_target_du_win
		}
		else = {
			custom_effect_tooltip = GER_agrarian_target_du_lose
		}
	}
	hidden_effect = {
		random_list = {
			0 = {
				modifier = { # Target LVP (L)
					add = 1
					check_variable = { GER_LVP_seats_l > 0 }
					3 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 3.id } } }
					add_to_array = { GER.democratic_union_members_array = 3.id }
					add_to_variable = { GER_democratic_union_seats = GER_LVP_seats_l }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target LVP (R)
					add = 1
					check_variable = { GER_LVP_seats_r > 0 }
					is_in_array = { GER.democratic_union_members_array = 3.id }
					4 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 4.id } } }
					add_to_array = { GER.democratic_union_members_array = 4.id }
					add_to_variable = { GER_democratic_union_seats = GER_LVP_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = {
					add = 1
					check_variable = { GER_liberal_seats_r > 0 }
					is_in_array = { GER.democratic_union_members_array = 4.id }
					6 = { GER_is_possible_reichstag_target = yes } # Target Minor Liberals
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 6.id } } }
					add_to_array = { GER.democratic_union_members_array = 6.id }
					add_to_variable = { GER_democratic_union_seats = GER_liberal_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Poles
					add = 1
					check_variable = { GER_polish_seats_r > 0 }
					7 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 7.id } } }
					add_to_array = { GER.democratic_union_members_array = 7.id }
					add_to_variable = { GER_democratic_union_seats = GER_polish_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Zentrum (L)
					add = 1
					check_variable = { GER_Zentrum_seats_l > 0 }
					8 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 8.id } } }
					add_to_array = { GER.democratic_union_members_array = 8.id }
					add_to_variable = { GER_democratic_union_seats = GER_Zentrum_seats_l }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Zentrum (C)
					add = 1
					check_variable = { GER_Zentrum_seats_c > 0 }
					is_in_array = { GER.democratic_union_members_array = 8.id }
					9 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 9.id } } }
					add_to_array = { GER.democratic_union_members_array = 9.id }
					add_to_variable = { GER_democratic_union_seats = GER_Zentrum_seats_c }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Zentrum (R)
					add = 1
					check_variable = { GER_Zentrum_seats_r > 0 }
					is_in_array = { GER.democratic_union_members_array = 9.id }
					10 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 10.id } } }
					add_to_array = { GER.democratic_union_members_array = 10.id }
					add_to_variable = { GER_democratic_union_seats = GER_Zentrum_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Guelphs
					add = 1
					check_variable = { GER_Guelph_seats_r > 0 }
					is_in_array = { GER.democratic_union_members_array = 9.id }
					5 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 5.id } } }
					add_to_array = { GER.democratic_union_members_array = 5.id }
					add_to_variable = { GER_democratic_union_seats = GER_Guelph_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Agrarians
					add = 1
					check_variable = { GER_agrarian_seats_r > 0 }
					is_in_array = { GER.democratic_union_members_array = 9.id }
					11 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 11.id } } }
					add_to_array = { GER.democratic_union_members_array = 11.id }
					add_to_variable = { GER_democratic_union_seats = GER_agrarian_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
		}
	}
}

GER_swr_alignment_effect = {
	custom_effect_tooltip = GER_reichstag_faction_alignment_turn_tt
	if = {
		limit = {
			check_variable = { GER_DkP_seats_r > 0 }
			12 = { GER_is_possible_reichstag_target = yes } # Target DkP
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 12.id }
			}
			custom_effect_tooltip = GER_dkp_target_swr_win
		}
		else = {
			custom_effect_tooltip = GER_dkp_target_swr_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_agrarian_seats_r > 0 }
			is_in_array = { GER.swr_coalition_members_array = 12.id }
			11 = { GER_is_possible_reichstag_target = yes } # Target Agrarians
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 11.id }
			}
			custom_effect_tooltip = GER_agrarian_target_swr_win
		}
		else = {
			custom_effect_tooltip = GER_agrarian_target_swr_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_Zentrum_seats_r > 0 }
			10 = { GER_is_possible_reichstag_target = yes } # Target Zentrum (Right)
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 10.id }
			}
			custom_effect_tooltip = GER_zentrumr_target_swr_win
		}
		else = {
			custom_effect_tooltip = GER_zentrumr_target_swr_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_Guelph_seats_r > 0 }
			is_in_array = { GER.swr_coalition_members_array = 10.id }
			5 = { GER_is_possible_reichstag_target = yes } # Target Guelphs
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 5.id }
			}
			custom_effect_tooltip = GER_guelph_target_swr_win
		}
		else = {
			custom_effect_tooltip = GER_guelph_target_swr_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_Zentrum_seats_c > 0 }
			is_in_array = { GER.swr_coalition_members_array = 10.id }
			9 = { GER_is_possible_reichstag_target = yes } # Target Zentrum (Centre)
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 9.id }
			}
			custom_effect_tooltip = GER_zentrumc_target_swr_win
		}
		else = {
			custom_effect_tooltip = GER_zentrumc_target_swr_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_liberal_seats_r > 0 }
			OR = {
				is_in_array = { GER.swr_coalition_members_array = 9.id }
				is_in_array = { GER.swr_coalition_members_array = 5.id }
			}
			6 = { GER_is_possible_reichstag_target = yes } # Target Liberal Parties
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 6.id }
			}
			custom_effect_tooltip = GER_liberal_target_swr_win
		}
		else = {
			custom_effect_tooltip = GER_liberal_target_swr_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_Zentrum_seats_l > 0 }
			is_in_array = { GER.swr_coalition_members_array = 9.id }
			8 = { GER_is_possible_reichstag_target = yes } # Target Zentrum (Left)
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 8.id }
			}
			custom_effect_tooltip = GER_zentruml_target_swr_win
		}
		else = {
			custom_effect_tooltip = GER_zentruml_target_swr_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_polish_seats_r > 0 }
			is_in_array = { GER.swr_coalition_members_array = 9.id }
			7 = { GER_is_possible_reichstag_target = yes } # Target Polish Party
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 7.id }
			}
			custom_effect_tooltip = GER_polish_target_swr_win
		}
		else = {
			custom_effect_tooltip = GER_polish_target_swr_lose
		}
	}
	if = {
		limit = {
			check_variable = { GER_LVP_seats_r > 0 }
			is_in_array = { GER.swr_coalition_members_array = 9.id }
			4 = { GER_is_possible_reichstag_target = yes } # Target LVP (Right)
		}
		if = {
			limit = {
				is_in_array = { GER.protected_factions_array = 4.id }
			}
			custom_effect_tooltip = GER_lvpr_target_swr_win
		}
		else = {
			custom_effect_tooltip = GER_lvpr_target_swr_lose
		}
	}
	hidden_effect = {
		random_list = {
			0 = {
				modifier = { # Target DkP
					add = 1
					check_variable = { GER_DkP_seats_r > 0 }
					12 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 12.id } } }
					add_to_array = { GER.swr_coalition_members_array = 12.id }
					add_to_variable = { GER_swr_coalition_seats = GER_DkP_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Agrarians
					add = 1
					check_variable = { GER_agrarian_seats_r > 0 }
					is_in_array = { GER.swr_coalition_members_array = 12.id }
					11 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 11.id } } }
					add_to_array = { GER.swr_coalition_members_array = 11.id }
					add_to_variable = { GER_swr_coalition_seats = GER_agrarian_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Zentrum (Right)
					add = 1
					check_variable = { GER_Zentrum_seats_r > 0 }
					10 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 10.id } } }
					add_to_array = { GER.swr_coalition_members_array = 10.id }
					add_to_variable = { GER_swr_coalition_seats = GER_Zentrum_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Guelphs
					add = 1
					check_variable = { GER_Guelph_seats_r > 0 }
					is_in_array = { GER.swr_coalition_members_array = 10.id }
					5 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 5.id } } }
					add_to_array = { GER.swr_coalition_members_array = 5.id }
					add_to_variable = { GER_swr_coalition_seats = GER_Guelph_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Zentrum (Centre)
					add = 1
					check_variable = { GER_Zentrum_seats_c > 0 }
					is_in_array = { GER.swr_coalition_members_array = 10.id }
					9 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 9.id } } }
					add_to_array = { GER.swr_coalition_members_array = 9.id }
					add_to_variable = { GER_swr_coalition_seats = GER_Zentrum_seats_c }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Liberal Parties
					add = 1
					check_variable = { GER_liberal_seats_r > 0 }
					OR = {
						is_in_array = { GER.swr_coalition_members_array = 9.id }
						is_in_array = { GER.swr_coalition_members_array = 5.id }
					}
					6 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 6.id } } }
					add_to_array = { GER.swr_coalition_members_array = 6.id }
					add_to_variable = { GER_swr_coalition_seats = GER_liberal_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Zentrum (Left)
					add = 1
					check_variable = { GER_Zentrum_seats_l > 0 }
					is_in_array = { GER.swr_coalition_members_array = 9.id }
					8 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 8.id } } }
					add_to_array = { GER.swr_coalition_members_array = 8.id }
					add_to_variable = { GER_swr_coalition_seats = GER_Zentrum_seats_l }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target Polish Party
					add = 1
					check_variable = { GER_polish_seats_r > 0 }
					is_in_array = { GER.swr_coalition_members_array = 9.id }
					7 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 7.id } } }
					add_to_array = { GER.swr_coalition_members_array = 7.id }
					add_to_variable = { GER_swr_coalition_seats = GER_polish_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
			0 = {
				modifier = { # Target LVP (Right)
					add = 1
					check_variable = { GER_LVP_seats_r > 0 }
					is_in_array = { GER.swr_coalition_members_array = 9.id }
					4 = { GER_is_possible_reichstag_target = yes }
				}
				if = {
					limit = { NOT = { is_in_array = { GER.protected_factions_array = 4.id } } }
					add_to_array = { GER.swr_coalition_members_array = 4.id }
					add_to_variable = { GER_swr_coalition_seats = GER_LVP_seats_r }
					subtract_from_variable = { GER_free_factions = 1 } # reduce number of free factions
				}
			}
		}
	}
}

GER_reset_reichstag_game = {
	clear_array = GER.protected_factions_array # Clear all protected factions
	for_each_scope_loop = {
		array = GER.GER_factions_states
		clr_state_flag = GER_faction_protected_temporarily
		clr_state_flag = GER_faction_targeted
	}
	if = {
		limit = {
			check_variable = {
				var = GER_free_factions
				value = GER_max_faction_targets
				compare = less_than_or_equals
			}
		}
		subtract_from_variable = { GER_max_faction_targets = 1 } # If there is an equal number or less of free factions to available faction targets, remove 1 faction target. This is to never get to a situation where the player can just cover every remaining faction and prevent a VoNC permanently.
		hidden_effect = {
			country_event = gerschl.45
		}
	}
	set_variable = { GER_available_faction_targets = GER_max_faction_targets } # Refreshed with GER_max_faction_targets every turn
	if = {
		limit = {
			has_country_flag = GER_du_frozen_twice
		}
		clr_country_flag = GER_du_frozen_twice
	}
	else = {
		clr_country_flag = GER_du_frozen
	}
	clr_country_flag = GER_swr_frozen # Remove freeze on factions. DU has a focus where they can be frozen for two turns, it sets GER_du_frozen_twice
	hidden_effect = {
		country_event = gerschl.70
	}
}
gain_random_cryptology_dept_upgrade = {
	custom_effect_tooltip = free_cryptology_dept_upgrade_tt
	hidden_effect = {
		if = {
			limit = {
				has_intelligence_agency = no
			}
			create_intelligence_agency = yes
		}
		else = {
			random_list = {
				1 = {
					upgrade_intelligence_agency = upgrade_form_department
					modifier = {
						factor = 0
						has_done_agency_upgrade = upgrade_form_department
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost
							NOT = { has_done_agency_upgrade = upgrade_form_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_decryption_boost_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_decryption_boost_2
							NOT = { has_done_agency_upgrade = upgrade_form_department }
							NOT = { has_done_agency_upgrade = upgrade_decryption_boost }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength
							NOT = { has_done_agency_upgrade = upgrade_form_department }
						}
					}
				}
				1 = {
					upgrade_intelligence_agency = upgrade_crypto_strength_2
					modifier = {
						factor = 0
						OR = {
							has_done_agency_upgrade = upgrade_crypto_strength_2
							NOT = { has_done_agency_upgrade = upgrade_form_department }
							NOT = { has_done_agency_upgrade = upgrade_crypto_strength }
						}
					}
				}
			}
		}
	}
}
GER_check_swr_coalition_strength = {
	clamp_variable = { var = GER_swr_coalition_balance min = 0 max = 100 }
	if = {
		limit = {
			GER_ulrich_von_hassell = {
				has_trait = KR_leader_of_dvlp_min
			}
			check_variable = { GER_swr_coalition_balance > 0 }
		}
		hidden_effect = {
			GER_ulrich_von_hassell = {
				remove_trait = {
					trait = KR_leader_of_dvlp_min
					slot = political_advisor
				}
				add_trait = {
					trait = KR_leader_of_dvlp_low
					slot = political_advisor
				}
			}
		}
		custom_effect_tooltip = GER_swr_coalition_dvlp_stronger_tt
	}
	if = {
		limit = {
			GER_ulrich_von_hassell = {
				has_trait = KR_leader_of_dvlp_low
			}
			check_variable = { GER_swr_coalition_balance > 30 }
		}
		hidden_effect = {
			GER_ulrich_von_hassell = {
				remove_trait = {
					trait = KR_leader_of_dvlp_low
					slot = political_advisor
				}
				add_trait = {
					trait = KR_leader_of_dvlp_average
					slot = political_advisor
				}
			}
		}
		custom_effect_tooltip = GER_swr_coalition_dvlp_stronger_tt
	}
	if = {
		limit = {
			GER_ulrich_von_hassell = {
				has_trait = KR_leader_of_dvlp_average
			}
			check_variable = { GER_swr_coalition_balance > 70 }
		}
		hidden_effect = {
			GER_ulrich_von_hassell = {
				remove_trait = {
					trait = KR_leader_of_dvlp_average
					slot = political_advisor
				}
				add_trait = {
					trait = KR_leader_of_dvlp_high
					slot = political_advisor
				}
			}
		}
		custom_effect_tooltip = GER_swr_coalition_dvlp_stronger_tt
	}
	if = {
		limit = {
			GER_ulrich_von_hassell = {
				has_trait = KR_leader_of_dvlp_high
			}
			check_variable = { GER_swr_coalition_balance > 99 }
		}
		hidden_effect = {
			GER_ulrich_von_hassell = {
				remove_trait = {
					trait = KR_leader_of_dvlp_high
					slot = political_advisor
				}
				add_trait = {
					trait = KR_leader_of_dvlp_total
					slot = political_advisor
				}
			}
		}
		custom_effect_tooltip = GER_swr_coalition_dvlp_stronger_tt
	}
	if = {
		limit = {
			GER_ulrich_von_hassell = {
				has_trait = KR_leader_of_dvlp_total
			}
			check_variable = { GER_swr_coalition_balance < 100 }
		}
		hidden_effect = {
			GER_ulrich_von_hassell = {
				remove_trait = {
					trait = KR_leader_of_dvlp_total
					slot = political_advisor
				}
				add_trait = {
					trait = KR_leader_of_dvlp_high
					slot = political_advisor
				}
			}
		}
		custom_effect_tooltip = GER_swr_coalition_dkp_stronger_tt
	}
	if = {
		limit = {
			GER_ulrich_von_hassell = {
				has_trait = KR_leader_of_dvlp_high
			}
			check_variable = { GER_swr_coalition_balance < 71 }
		}
		hidden_effect = {
			GER_ulrich_von_hassell = {
				remove_trait = {
					trait = KR_leader_of_dvlp_high
					slot = political_advisor
				}
				add_trait = {
					trait = KR_leader_of_dvlp_average
					slot = political_advisor
				}
			}
		}
		custom_effect_tooltip = GER_swr_coalition_dkp_stronger_tt
	}
	if = {
		limit = {
			GER_ulrich_von_hassell = {
				has_trait = KR_leader_of_dvlp_average
			}
			check_variable = { GER_swr_coalition_balance < 31 }
		}
		hidden_effect = {
			GER_ulrich_von_hassell = {
				remove_trait = {
					trait = KR_leader_of_dvlp_average
					slot = political_advisor
				}
				add_trait = {
					trait = KR_leader_of_dvlp_low
					slot = political_advisor
				}
			}
		}
		custom_effect_tooltip = GER_swr_coalition_dkp_stronger_tt
	}
	if = {
		limit = {
			GER_ulrich_von_hassell = {
				has_trait = KR_leader_of_dvlp_low
			}
			check_variable = { GER_swr_coalition_balance < 1 }
		}
		hidden_effect = {
			GER_ulrich_von_hassell = {
				remove_trait = {
					trait = KR_leader_of_dvlp_low
					slot = political_advisor
				}
				add_trait = {
					trait = KR_leader_of_dvlp_min
					slot = political_advisor
				}
			}
		}
		custom_effect_tooltip = GER_swr_coalition_dkp_stronger_tt
	}
}
GER_add_naval_variants = {
	### Submarines ###
	create_equipment_variant = {
		name = "Type II" #equivalent to OTL class
		type = ship_hull_submarine_1
		name_group = GER_SS_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_torpedo_slot = ship_torpedo_sub_1
			fixed_ship_engine_slot = sub_ship_engine_1
			rear_1_custom_slot = empty
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Type VII" #equivalent to OTL class
		type = ship_hull_submarine_2
		name_group = GER_SS_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_torpedo_slot = ship_torpedo_sub_2
			fixed_ship_engine_slot = sub_ship_engine_1
			rear_1_custom_slot = empty
		}
	}

	### Destroyers ###
	create_equipment_variant = {
		name = "B97 Class" #WW1 destroyers
		type = ship_hull_light_1
		name_group = GER_DD_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_light_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = light_ship_engine_1
			fixed_ship_torpedo_slot = ship_torpedo_1
			mid_1_custom_slot = empty
			rear_1_custom_slot = empty
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "V170 Class" #equivalent to OTL British A-class
		type = ship_hull_light_1
		name_group = GER_DD_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_light_battery_2
			fixed_ship_anti_air_slot = empty
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = light_ship_engine_2
			fixed_ship_torpedo_slot = ship_torpedo_1
			mid_1_custom_slot = ship_torpedo_1
			rear_1_custom_slot = ship_depth_charge_1
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Zerstörer 1934" #equivalent to OTL class
		type = ship_hull_light_2
		name_group = GER_DD_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_light_battery_2
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = light_ship_engine_2
			fixed_ship_torpedo_slot = ship_torpedo_1
			mid_1_custom_slot = ship_torpedo_1
			rear_1_custom_slot = ship_depth_charge_1
		}
	}

	### Light Cruisers ###
	create_equipment_variant = {
		name = "Brummer Class" #WW1 minelayers
		type = ship_hull_cruiser_1
		name_group = GER_CL_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_light_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = cruiser_ship_engine_1
			mid_1_custom_slot = ship_anti_air_1
			mid_2_custom_slot = ship_mine_layer_1
			rear_1_custom_slot = ship_mine_layer_1
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Cöln Class" #WW1 cruisers
		type = ship_hull_cruiser_1
		name_group = GER_CL_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_light_medium_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = cruiser_ship_engine_1
			fixed_ship_armor_slot = ship_armor_cruiser_1
			mid_1_custom_slot = ship_torpedo_1
			mid_2_custom_slot = ship_torpedo_1
			rear_1_custom_slot = empty
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Hamburg Class" #equivalent to OTL Emden
		type = ship_hull_cruiser_1
		name_group = GER_CL_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_light_medium_battery_1
			fixed_ship_anti_air_slot = empty
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = cruiser_ship_engine_1
			fixed_ship_armor_slot = ship_armor_cruiser_1
			mid_1_custom_slot = ship_light_medium_battery_1
			mid_2_custom_slot = ship_torpedo_1
			rear_1_custom_slot = empty
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "München Class" #equivalent to OTL Königsberg
		type = ship_hull_cruiser_1
		name_group = GER_CL_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_light_medium_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = cruiser_ship_engine_2
			fixed_ship_armor_slot = ship_armor_cruiser_1
			mid_1_custom_slot = ship_torpedo_1
			mid_2_custom_slot = ship_light_medium_battery_1
			rear_1_custom_slot = ship_mine_layer_1
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Straßburg Class" #equivalent to OTL Leipzig
		type = ship_hull_cruiser_2
		name_group = GER_CL_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_light_medium_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = cruiser_ship_engine_1
			fixed_ship_armor_slot = ship_armor_cruiser_1
			front_1_custom_slot = ship_anti_air_1
			mid_1_custom_slot = ship_torpedo_1
			mid_2_custom_slot = ship_light_medium_battery_1
			rear_1_custom_slot = ship_airplane_launcher_1
		}
	}

	### Heavy Cruisers ###
	create_equipment_variant = {
		name = "Admiral Scheer Class" #equivalent to OTL Deutschland
		type = ship_hull_armoured_cruiser
		name_group = GER_CA_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_battery_slot = ship_heavy_battery_2
			fixed_ship_secondaries_slot = ship_secondaries_1
			fixed_ship_armor_slot = ship_armor_cruiser_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_engine_slot = cruiser_ship_engine_2
			rear_1_custom_slot = ship_torpedo_1
			mid_1_custom_slot = ship_airplane_launcher_1
		}
	}
	create_equipment_variant = {
		name = "Yorck Class" #equivalent to OTL Italian Zara
		type = ship_hull_cruiser_1
		name_group = GER_CA_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_medium_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = cruiser_ship_engine_2
			fixed_ship_armor_slot = ship_armor_cruiser_2
			fixed_ship_secondaries_slot = empty
			mid_1_custom_slot = ship_medium_battery_1
			mid_2_custom_slot = ship_airplane_launcher_1
			rear_1_custom_slot = ship_anti_air_1
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Admiral Hipper Class" #equivalent to OTL class
		type = ship_hull_cruiser_2
		name_group = GER_CA_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_medium_battery_2
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = cruiser_ship_engine_2
			fixed_ship_armor_slot = ship_armor_cruiser_2
			front_1_custom_slot = ship_anti_air_1
			mid_1_custom_slot = ship_torpedo_1
			mid_2_custom_slot = ship_airplane_launcher_1
			rear_1_custom_slot = ship_medium_battery_2
		}
	}

	### Battlecruisers ###
	create_equipment_variant = {
		name = "Mackensen Class" #WW1 battlecruisers
		type = ship_hull_heavy_1
		name_group = GER_BC_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_heavy_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = heavy_ship_engine_1
			fixed_ship_secondaries_slot = ship_secondaries_1
			fixed_ship_armor_slot = ship_armor_bc_1
			front_1_custom_slot = ship_heavy_battery_1
			mid_1_custom_slot = ship_secondaries_1
			mid_2_custom_slot = empty
			rear_1_custom_slot = empty
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Prinz Heinrich Class" #post-WW1 battlecruisers, equivalent to British G3 design
		type = ship_hull_heavy_1
		name_group = GER_BC_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_heavy_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_1
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = heavy_ship_engine_2
			fixed_ship_secondaries_slot = ship_secondaries_1
			fixed_ship_armor_slot = ship_armor_bc_2
			front_1_custom_slot = ship_anti_air_1
			mid_1_custom_slot = empty
			mid_2_custom_slot = ship_secondaries_1
			rear_1_custom_slot = ship_heavy_battery_1
		}
	}

	### Battleships ###
	create_equipment_variant = {
		name = "Kaiser Class" #WW1 battleship
		type = ship_hull_heavy_1
		name_group = GER_BB_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_heavy_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_1
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = heavy_ship_engine_1
			fixed_ship_secondaries_slot = ship_secondaries_1
			fixed_ship_armor_slot = ship_armor_bb_1
			front_1_custom_slot = empty
			mid_1_custom_slot = empty
			mid_2_custom_slot = ship_secondaries_1
			rear_1_custom_slot = ship_heavy_battery_1
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "König Class" #WW1 battleship
		type = ship_hull_heavy_1
		name_group = GER_BB_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_heavy_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = heavy_ship_engine_1
			fixed_ship_secondaries_slot = ship_secondaries_1
			fixed_ship_armor_slot = ship_armor_bb_1
			front_1_custom_slot = ship_anti_air_1
			mid_1_custom_slot = ship_secondaries_1
			mid_2_custom_slot = empty
			rear_1_custom_slot = ship_heavy_battery_1
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Bayern Class" #WW1 battleship
		type = ship_hull_heavy_1
		name_group = GER_BB_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_heavy_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_1
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = heavy_ship_engine_1
			fixed_ship_secondaries_slot = ship_secondaries_1
			fixed_ship_armor_slot = ship_armor_bb_1
			front_1_custom_slot = empty
			mid_1_custom_slot = ship_airplane_launcher_1
			mid_2_custom_slot = ship_secondaries_1
			rear_1_custom_slot = ship_heavy_battery_1
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Deutschland Class" #Dreadnought Race 20's battleship
		type = ship_hull_heavy_1
		name_group = GER_BB_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_heavy_battery_2
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = heavy_ship_engine_1
			fixed_ship_secondaries_slot = ship_secondaries_2
			fixed_ship_armor_slot = ship_armor_bb_2
			front_1_custom_slot = ship_heavy_battery_2
			mid_1_custom_slot = ship_secondaries_2
			mid_2_custom_slot = empty
			rear_1_custom_slot = empty
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Scharnhorst Class" #equivalent to OTL class
		type = ship_hull_heavy_2
		name_group = GER_BB_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_heavy_battery_2
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_1
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = heavy_ship_engine_2
			fixed_ship_secondaries_slot = ship_secondaries_1
			fixed_ship_armor_slot = ship_armor_bb_1
			front_1_custom_slot = ship_anti_air_1
			mid_1_custom_slot = empty
			mid_2_custom_slot = ship_secondaries_1
			rear_1_custom_slot = ship_heavy_battery_2
		}
	}
	create_equipment_variant = {
		name = "Tirpitz Class" #equivalent to OTL Bismarck
		type = ship_hull_heavy_2
		name_group = GER_BB_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_heavy_battery_2
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_1
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = heavy_ship_engine_2
			fixed_ship_secondaries_slot = ship_secondaries_2
			fixed_ship_armor_slot = ship_armor_bb_1
			front_1_custom_slot = ship_anti_air_1
			mid_1_custom_slot = ship_airplane_launcher_1
			mid_2_custom_slot = ship_secondaries_2
			rear_1_custom_slot = ship_heavy_battery_2
		}
	}

	### Dreadnoughts ###
	create_equipment_variant = {
		name = "Elsaß Class" #fictional Dreadnought Race class, equivalent to OTL British N3
		type = ship_hull_super_heavy_1
		name_group = GER_BB_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_battery_slot = ship_super_heavy_battery_1
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_fire_control_system_slot = ship_fire_control_system_0
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = heavy_ship_engine_2
			fixed_ship_secondaries_slot = ship_secondaries_2
			fixed_ship_armor_slot = ship_armor_shbb
			front_1_custom_slot = ship_anti_air_1
			front_2_custom_slot = empty
			mid_1_custom_slot = empty
			mid_2_custom_slot = ship_secondaries_2
			mid_3_custom_slot = ship_secondaries_2
			rear_1_custom_slot = ship_super_heavy_battery_1
			rear_2_custom_slot = ship_airplane_launcher_1
		}
	}

	### Carriers ###
	create_equipment_variant = {
		name = "Rhein Class" #equivalent to OTL British Hermes
		type = ship_hull_carrier_conversion_ca
		name_group = GER_CV_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_deck_slot_1 = ship_deck_space
			fixed_ship_deck_slot_2 = empty
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = cruiser_ship_engine_1
			fixed_ship_secondaries_slot = ship_secondaries_1
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Weser Class" #equivalent to OTL Japanese Kaga
		type = ship_hull_carrier_conversion_bb
		name_group = GER_CV_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_deck_slot_1 = ship_deck_space
			fixed_ship_deck_slot_2 = ship_deck_space
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = heavy_ship_engine_1
			fixed_ship_secondaries_slot = ship_secondaries_1
			mid_1_custom_slot = ship_deck_space
		}
		obsolete = yes
	}
	create_equipment_variant = {
		name = "Graf Zeppelin Class" #equivalent to OTL class
		type = ship_hull_carrier_1
		name_group = GER_CV_IMPERIAL
		show_position = no
		parent_version = 0
		modules = {
			fixed_ship_deck_slot_1 = ship_deck_space
			fixed_ship_deck_slot_2 = ship_deck_space
			fixed_ship_anti_air_slot = ship_anti_air_1
			fixed_ship_radar_slot = empty
			fixed_ship_engine_slot = carrier_ship_engine_2
			fixed_ship_secondaries_slot = ship_secondaries_1
			front_1_custom_slot = ship_deck_space
		}
	}
}

GER_add_armour_variants = {
	if = {
		limit = { has_dlc_nsb = yes }
		create_equipment_variant = {
			name = "St.Pzw. II"
			type = light_tank_chassis_0
			show_position = no
			parent_version = 0
			modules = {
				main_armament_slot = tank_heavy_machine_gun
				turret_type_slot = tank_light_one_man_tank_turret
				suspension_type_slot = tank_bogie_suspension
				armor_type_slot = tank_riveted_armor
				engine_type_slot = tank_gasoline_engine
				special_type_slot_1 = tank_radio_1
				special_type_slot_2 = secondary_turret_hmg
			}
			upgrades = {
				tank_nsb_engine_upgrade = 2
				tank_nsb_armor_upgrade = 2
			}
			obsolete = yes
		}
		create_equipment_variant = {
			name = "Sp.Pz. I Ausf. A"
			type = light_tank_chassis_1
			show_position = no
			parent_version = 0
			modules = {
				main_armament_slot = tank_heavy_machine_gun
				turret_type_slot = tank_light_one_man_tank_turret
				suspension_type_slot = tank_christie_suspension
				armor_type_slot = tank_riveted_armor
				engine_type_slot = tank_gasoline_engine
				special_type_slot_1 = tank_radio_1
			}
			upgrades = {
				tank_nsb_engine_upgrade = 5
				tank_nsb_armor_upgrade = 1
			}
		}
		create_equipment_variant = {
			name = "St.Pz.Kpfw. II"
			type = medium_tank_chassis_0
			show_position = no
			parent_version = 0
			modules = {
				main_armament_slot = tank_small_cannon
				turret_type_slot = tank_medium_two_man_tank_turret
				suspension_type_slot = tank_torsion_bar_suspension
				armor_type_slot = tank_riveted_armor
				engine_type_slot = tank_gasoline_engine
			}
			upgrades = {
				tank_nsb_engine_upgrade = 2
				tank_nsb_armor_upgrade = 1
			}
		}
		create_equipment_variant = {
			name = "Heerpanzerwagen II"
			type = heavy_tank_chassis_0
			show_position = no
			parent_version = 0
			modules = {
				main_armament_slot = tank_close_support_gun
				turret_type_slot = tank_heavy_three_man_tank_turret
				suspension_type_slot = tank_bogie_suspension
				armor_type_slot = tank_riveted_armor
				engine_type_slot = tank_gasoline_engine
				special_type_slot_1 = tank_radio_1
				special_type_slot_2 = secondary_turret_hmg
				special_type_slot_3 = secondary_turret_hmg
				special_type_slot_4 = secondary_turret_hmg
			}
			upgrades = {
				tank_nsb_engine_upgrade = 6
				tank_nsb_armor_upgrade = 2
			}
		}
	}
}

GER_add_plane_variants = {
	if = {
		limit = { has_dlc_bba = yes }
		create_equipment_variant = {
			name = "Do 23"
			type = medium_plane_airframe_0
			show_position = no
			modules = {
				fixed_main_weapon_slot = medium_bomb_bay
				fixed_auxiliary_weapon_slot_1 = empty
				fixed_auxiliary_weapon_slot_2 = empty
				fixed_auxiliary_weapon_slot_3 = empty
				engine_type_slot = engine_1_2x
				special_type_slot_1 = empty
				special_type_slot_2 = empty
				special_type_slot_3 = empty
				special_type_slot_4 = empty
			}
			obsolete = yes
			icon = GFX_GER_medium_0_do23_medium
		}
		create_equipment_variant = {
			name = "Ju 86"
			type = medium_plane_airframe_0
			show_position = no
			modules = {
				fixed_main_weapon_slot = medium_bomb_bay
				fixed_auxiliary_weapon_slot_1 = empty
				fixed_auxiliary_weapon_slot_2 = empty
				fixed_auxiliary_weapon_slot_3 = empty
				engine_type_slot = engine_2_2x
				special_type_slot_1 = lmg_defense_turret_2x
				special_type_slot_2 = fuel_tanks_medium
				special_type_slot_3 = empty
				special_type_slot_4 = empty
			}
			obsolete = yes
			icon = GFX_GER_medium_1_ju86a_medium
		}
		create_equipment_variant = {
			name = "He 111"
			type = medium_plane_airframe_1
			show_position = no
			modules = {
				fixed_main_weapon_slot = medium_bomb_bay
				fixed_auxiliary_weapon_slot_1 = medium_bomb_bay
				fixed_auxiliary_weapon_slot_2 = empty
				fixed_auxiliary_weapon_slot_3 = empty
				engine_type_slot = engine_2_2x
				special_type_slot_1 = lmg_defense_turret_2x
				special_type_slot_2 = lmg_defense_turret_2x
				special_type_slot_3 = empty
				special_type_slot_4 = empty
			}
			icon = GFX_GER_medium_1_he111b_medium
		}
		create_equipment_variant = {
			name = "Ff 68"
			type = small_plane_airframe_0
			show_position = no
			modules = {
				fixed_main_weapon_slot = light_mg_2x
				fixed_auxiliary_weapon_slot_1 = light_mg_2x
				engine_type_slot = engine_1_1x
				special_type_slot_1 = empty
			}
			obsolete = yes
		}
		create_equipment_variant = {
			name = "Hs 123"
			type = small_plane_cas_airframe_0
			show_position = no
			modules = {
				fixed_main_weapon_slot = bomb_locks
				engine_type_slot = engine_1_1x
				special_type_slot_1 = empty
			}
			obsolete = yes
			icon = GFX_GER_small_0_hs123_medium
		}
		create_equipment_variant = {
			name = "Bf 109"
			type = small_plane_airframe_1
			show_position = no
			modules = {
				fixed_main_weapon_slot = light_mg_4x
				fixed_auxiliary_weapon_slot_1 = light_mg_4x
				engine_type_slot = engine_2_1x
				special_type_slot_1 = empty
			}
		}
		create_equipment_variant = {
			name = "Ju 87"
			type = small_plane_cas_airframe_1
			show_position = no
			modules = {
				fixed_main_weapon_slot = bomb_locks
				engine_type_slot = engine_2_1x
				special_type_slot_1 = lmg_defense_turret
				special_type_slot_2 = dive_brakes_small
			}
		}
		create_equipment_variant = {
			name = "Fi 167"
			type = small_plane_naval_bomber_airframe_1
			show_position = no
			modules = {
				fixed_main_weapon_slot = torpedo_mounting
				engine_type_slot = engine_2_1x
				special_type_slot_1 = lmg_defense_turret
				special_type_slot_2 = floats
			}
		}
		if = {
			limit = { tag = GEA }
			create_equipment_variant = {
				name = "Ff 68 T"
				type = cv_small_plane_airframe_0
				show_position = no
				modules = {
					fixed_main_weapon_slot = light_mg_2x
					fixed_auxiliary_weapon_slot_1 = light_mg_2x
					engine_type_slot = engine_1_1x
					special_type_slot_1 = empty
				}
				obsolete = yes
			}
			create_equipment_variant = {
				name = "Bf 109 T"
				type = cv_small_plane_airframe_1
				show_position = no
				modules = {
					fixed_main_weapon_slot = light_mg_4x
					fixed_auxiliary_weapon_slot_1 = light_mg_4x
					engine_type_slot = engine_2_1x
					special_type_slot_1 = empty
				}
			}
			create_equipment_variant = {
				name = "Fi 167 T"
				type = cv_small_plane_naval_bomber_airframe_1
				show_position = no
				modules = {
					fixed_main_weapon_slot = torpedo_mounting
					engine_type_slot = engine_1_1x
					special_type_slot_1 = empty
					special_type_slot_2 = empty
				}
			}
		}
	}
}

BAY_puppet_setup = {
	var:tag_to_release = {
		if = {
			limit = { has_socialist_government = yes }
			hidden_effect = {
				if = {
					limit = { has_character = GER_rupprecht_von_bayern }
					GER_rupprecht_von_bayern = { set_nationality = GER }
				}
			}
		}
		else = {
			hidden_effect = {
				GER = {
					GER_rupprecht_von_bayern = {
						set_nationality = BAY
						remove_all_country_leader_roles = yes
						add_country_leader_role = {
							country_leader = {
								desc = GER_rupprecht_von_bayern_leader_desc
								ideology = social_democrat_subtype
							}
							promote_leader = yes
						}
						add_country_leader_role = {
							country_leader = {
								desc = GER_rupprecht_von_bayern_leader_desc
								ideology = social_liberal_subtype
							}
							promote_leader = yes
						}
						add_country_leader_role = {
							country_leader = {
								desc = GER_rupprecht_von_bayern_leader_desc
								ideology = market_liberal_subtype
							}
							promote_leader = yes
						}
						add_country_leader_role = {
							country_leader = {
								desc = GER_rupprecht_von_bayern_leader_desc
								ideology = social_conservative_subtype
							}
							promote_leader = yes
						}
						add_country_leader_role = {
							country_leader = {
								desc = GER_rupprecht_von_bayern_leader_desc
								ideology = authoritarian_democrat_subtype
							}
							promote_leader = yes
						}
						add_country_leader_role = {
							country_leader = {
								desc = GER_rupprecht_von_bayern_leader_desc
								ideology = paternal_autocrat_subtype
							}
							promote_leader = yes
						}
						add_country_leader_role = {
							country_leader = {
								desc = GER_rupprecht_von_bayern_leader_desc
								ideology = national_populist_subtype
							}
							promote_leader = yes
						}
					}
				}
			}
			if = {
				limit = { is_subject_of = AUS }
				set_cosmetic_tag = SGF
			}
		}
	}
}
GER_setup_hugenberg_mechanic = {
	clr_country_flag = GER_hugenberg_will_annoy_you
	activate_mission = GER_DVLP_emergency_conference
	hidden_effect = {
		activate_mission = GER_DVLP_hugenberg_alignment
		activate_targeted_decision = { target = THIS decision = GER_hugenberg_defend }
		activate_targeted_decision = { target = THIS decision = GER_hugenberg_der_nahe_osten }
		activate_targeted_decision = { target = THIS decision = GER_hugenberg_joint_committee }
		activate_targeted_decision = { target = THIS decision = GER_hugenberg_reduce_tension }
		# Random chance for someone to become a vulnerability
		random_list = {
			30 = {
				modifier = {
					factor = 0
					has_country_flag = GER_schlange_vulnerability_fired
				}
				modifier = {
					factor = 0
					NOT = {
						has_character = GER_hans_schlange_schoningen
					}
				}
				set_country_flag = GER_schlange_vulnerability_fired
				activate_mission = GER_DVLP_schlange_schoningen_alignment
				activate_targeted_decision = { target = THIS decision = GER_hugenberg_defend_schlange }
			}
			70 = {

			}
		}
		random_list = {
			40 = {
				modifier = {
					factor = 0
					has_country_flag = GER_schmidt_vulnerability_fired
				}
				set_country_flag = GER_schmidt_vulnerability_fired
				activate_mission = GER_DVLP_schmidt_alignment
				activate_targeted_decision = { target = THIS decision = GER_hugenberg_defend_schmidt }
			}
			60 = {

			}
		}
		random_list = {
			40 = {
				modifier = {
					factor = 0
					has_country_flag = GER_levetzow_vulnerability_fired
				}
				set_country_flag = GER_levetzow_vulnerability_fired
				activate_mission = GER_DVLP_levetzow_alignment
				activate_targeted_decision = { target = THIS decision = GER_hugenberg_defend_levetzow }
			}
			60 = {

			}
		}
		random_list = {
			20 = {
				modifier = {
					factor = 0
					has_country_flag = GER_trotha_vulnerability_fired
				}
				set_country_flag = GER_trotha_vulnerability_fired
				activate_mission = GER_DVLP_trotha_alignment
				activate_targeted_decision = { target = THIS decision = GER_hugenberg_defend_trotha }
			}
			80 = {

			}
		}
	}
}
GER_hugenberg_event_effect = {
	if = {
		limit = {
			check_variable = { GER_hugenberg_events_received = 0 }
		}
		add_political_power = -25
	}
	else_if = {
		limit = {
			check_variable = { GER_hugenberg_events_received = 1 }
		}
		add_political_power = -40
	}
	else_if = {
		limit = {
			check_variable = { GER_hugenberg_events_received = 2 }
		}
		add_political_power = -40
		custom_effect_tooltip = GER_effect_increases_dkp_tt
		add_to_variable = { GER_swr_coalition_balance = -10 }
		GER_check_swr_coalition_strength = yes
	}
	else_if = {
		limit = {
			check_variable = { GER_hugenberg_events_received = 3 }
		}
		add_political_power = -50
		add_stability = -0.02
		custom_effect_tooltip = GER_effect_increases_dkp_tt
		add_to_variable = { GER_swr_coalition_balance = -10 }
		GER_check_swr_coalition_strength = yes
	}
	else_if = {
		limit = {
			check_variable = { GER_hugenberg_events_received = 4 }
		}
		add_political_power = -50
		add_stability = -0.05
		custom_effect_tooltip = GER_effect_increases_dkp_tt
		add_to_variable = { GER_swr_coalition_balance = -10 }
		GER_check_swr_coalition_strength = yes
	}
	else_if = {
		limit = {
			check_variable = { GER_hugenberg_events_received = 5 }
		}
		add_political_power = -50
		add_stability = -0.1
		custom_effect_tooltip = GER_effect_increases_dkp_tt
		add_to_variable = { GER_swr_coalition_balance = -10 }
		GER_check_swr_coalition_strength = yes
	}
	else = {
		add_political_power = -50
		add_stability = -0.1
		add_war_support = -0.05
		custom_effect_tooltip = GER_effect_increases_dkp_tt
		add_to_variable = { GER_swr_coalition_balance = -10 }
		GER_check_swr_coalition_strength = yes
	}
	custom_effect_tooltip = GER_hugenberg_will_grow_tt
}
GER_democratic_resistance_event = {
	random_list = {
		10 = {
			if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 1 }
				}
				country_event = { id = germany.38 days = 70 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 2 }
				}
				country_event = { id = germany.38 days = 80 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 3 }
				}
				country_event = { id = germany.38 days = 90 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 4 }
				}
				country_event = { id = germany.38 days = 95 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 5 }
				}
				country_event = { id = germany.38 days = 100 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 6 }
				}
				country_event = { id = germany.38 days = 105 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 7 }
				}
				country_event = { id = germany.38 days = 110 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 8 }
				}
				country_event = { id = germany.38 days = 120 }
			}
			else = {
				country_event = { id = germany.38 days = 60 }
			}
		}
		10 = {
			modifier = {
				factor = 0
				has_completed_focus = GER_gewerkschaftsbund
			}
			if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 1 }
				}
				country_event = { id = germany.39 days = 70 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 2 }
				}
				country_event = { id = germany.39 days = 80 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 3 }
				}
				country_event = { id = germany.39 days = 90 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 4 }
				}
				country_event = { id = germany.39 days = 95 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 5 }
				}
				country_event = { id = germany.39 days = 100 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 6 }
				}
				country_event = { id = germany.39 days = 105 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 7 }
				}
				country_event = { id = germany.39 days = 110 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 8 }
				}
				country_event = { id = germany.39 days = 120 }
			}
			else = {
				country_event = { id = germany.39 days = 60 }
			}
		}
		10 = {
			if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 1 }
				}
				country_event = { id = germany.40 days = 70 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 2 }
				}
				country_event = { id = germany.40 days = 80 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 3 }
				}
				country_event = { id = germany.40 days = 90 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 4 }
				}
				country_event = { id = germany.40 days = 95 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 5 }
				}
				country_event = { id = germany.40 days = 100 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 6 }
				}
				country_event = { id = germany.40 days = 105 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 7 }
				}
				country_event = { id = germany.40 days = 110 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 8 }
				}
				country_event = { id = germany.40 days = 120 }
			}
			else = {
				country_event = { id = germany.40 days = 60 }
			}
		}
		10 = {
			if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 1 }
				}
				country_event = { id = germany.41 days = 70 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 2 }
				}
				country_event = { id = germany.41 days = 80 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 3 }
				}
				country_event = { id = germany.41 days = 90 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 4 }
				}
				country_event = { id = germany.41 days = 95 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 5 }
				}
				country_event = { id = germany.41 days = 100 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 6 }
				}
				country_event = { id = germany.41 days = 105 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 7 }
				}
				country_event = { id = germany.41 days = 110 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 8 }
				}
				country_event = { id = germany.41 days = 120 }
			}
			else = {
				country_event = { id = germany.41 days = 60 }
			}
		}
		10 = {
			if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 1 }
				}
				country_event = { id = germany.42 days = 70 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 2 }
				}
				country_event = { id = germany.42 days = 80 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 3 }
				}
				country_event = { id = germany.42 days = 90 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 4 }
				}
				country_event = { id = germany.42 days = 95 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 5 }
				}
				country_event = { id = germany.42 days = 100 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 6 }
				}
				country_event = { id = germany.42 days = 105 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 7 }
				}
				country_event = { id = germany.42 days = 110 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 8 }
				}
				country_event = { id = germany.42 days = 120 }
			}
			else = {
				country_event = { id = germany.42 days = 60 }
			}
		}
		10 = {
			modifier = {
				factor = 0
				GER_is_swr_path = yes
				has_country_flag = GER_zentrum_right_chairman
			}
			modifier = {
				factor = 0
				GER_is_schleicher_path = yes
				has_country_flag = GER_zentrum_centre_chairman
			}
			if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 1 }
				}
				country_event = { id = germany.43 days = 70 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 2 }
				}
				country_event = { id = germany.43 days = 80 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 3 }
				}
				country_event = { id = germany.43 days = 90 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 4 }
				}
				country_event = { id = germany.43 days = 95 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 5 }
				}
				country_event = { id = germany.43 days = 100 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 6 }
				}
				country_event = { id = germany.43 days = 105 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 7 }
				}
				country_event = { id = germany.43 days = 110 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 8 }
				}
				country_event = { id = germany.43 days = 120 }
			}
			else = {
				country_event = { id = germany.43 days = 60 }
			}
		}
		10 = {
			modifier = {
				factor = 0
				GER_is_swr_path = yes
				has_country_flag = GER_zentrum_right_chairman
			}
			modifier = {
				factor = 0
				GER_is_schleicher_path = yes
				has_country_flag = GER_zentrum_centre_chairman
			}
			if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 1 }
				}
				country_event = { id = germany.44 days = 70 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 2 }
				}
				country_event = { id = germany.44 days = 80 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 3 }
				}
				country_event = { id = germany.44 days = 90 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 4 }
				}
				country_event = { id = germany.44 days = 95 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 5 }
				}
				country_event = { id = germany.44 days = 100 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 6 }
				}
				country_event = { id = germany.44 days = 105 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 7 }
				}
				country_event = { id = germany.44 days = 110 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 8 }
				}
				country_event = { id = germany.44 days = 120 }
			}
			else = {
				country_event = { id = germany.44 days = 60 }
			}
		}
		10 = {
			modifier = {
				factor = 0
				GER_is_swr_path = yes
				has_country_flag = GER_zentrum_right_chairman
			}
			modifier = {
				factor = 0
				GER_is_schleicher_path = yes
				has_country_flag = GER_zentrum_centre_chairman
			}
			if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 1 }
				}
				country_event = { id = germany.45 days = 70 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 2 }
				}
				country_event = { id = germany.45 days = 80 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 3 }
				}
				country_event = { id = germany.45 days = 90 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 4 }
				}
				country_event = { id = germany.45 days = 95 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 5 }
				}
				country_event = { id = germany.45 days = 100 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 6 }
				}
				country_event = { id = germany.45 days = 105 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 7 }
				}
				country_event = { id = germany.45 days = 110 }
			}
			else_if = {
				limit = {
					check_variable = { GER_anti_socialist_decisions_complete = 8 }
				}
				country_event = { id = germany.45 days = 120 }
			}
			else = {
				country_event = { id = germany.45 days = 60 }
			}
		}
	}
}
GER_yellow_socialism_idea = {
	if = {
		limit = {
			has_idea = GER_yellow_socialism_1
		}
		swap_ideas = {
			remove_idea = GER_yellow_socialism_1
			add_idea = GER_yellow_socialism_2
		}
	}
	else_if = {
		limit = {
			has_idea = GER_yellow_socialism_2
		}
		swap_ideas = {
			remove_idea = GER_yellow_socialism_2
			add_idea = GER_yellow_socialism_3
		}
	}
	else = {
		add_ideas = GER_yellow_socialism_1
	}
}
GER_calculate_wilhelmine_constitution = {
	set_variable = { GER_Wilhelmine_Constitution_political_power_factor = 0 }
	set_variable = { GER_Wilhelmine_Constitution_consumer_goods_factor = 0 }
	set_variable = { GER_Wilhelmine_Constitution_production_speed_buildings_factor = 0 }
	set_variable = { GER_Wilhelmine_Constitution_industrial_capacity_factory = 0 }
	set_variable = { GER_Wilhelmine_Constitution_industrial_capacity_dockyard = 0 }
	set_variable = { GER_Wilhelmine_Constitution_global_building_slots_factor = 0 }
	set_variable = { GER_Wilhelmine_Constitution_compliance_gain = 0 }
	set_variable = { GER_Wilhelmine_Constitution_resistance_damage_to_garrison = 0 }
	set_variable = { GER_Wilhelmine_Constitution_party_popularity_stability_factor = 0 }
	set_variable = { GER_Wilhelmine_Constitution_conscription_factor = 0 }
	set_variable = { GER_Wilhelmine_Constitution_production_factory_max_efficiency_factor = 0 }
	set_variable = { GER_Wilhelmine_Constitution_justify_war_goal_when_in_major_war_time = 0 }
	set_variable = { GER_Wilhelmine_Constitution_resistance_growth = 0 }
	if = {
		limit = {
			OR = {
				has_completed_focus = GER_full_parliamentarisation
				has_cosmetic_tag = GER_rep
			}
		}
		add_to_variable = { GER_Wilhelmine_Constitution_political_power_factor = 0.15 }
		add_to_variable = { GER_Wilhelmine_Constitution_consumer_goods_factor = -0.1 }
	}
	if = {
		limit = {
			has_completed_focus = GER_fundamental_rights
		}
		add_to_variable = { GER_Wilhelmine_Constitution_justify_war_goal_when_in_major_war_time = -0.5 }
		add_to_variable = { GER_Wilhelmine_Constitution_resistance_growth = -0.1 }
	}
	if = {
		limit = {
			has_completed_focus = GER_women_suffrage
		}
		add_to_variable = { GER_Wilhelmine_Constitution_conscription_factor = 0.05 }
		add_to_variable = { GER_Wilhelmine_Constitution_production_factory_max_efficiency_factor = 0.1 }
	}
	if = {
		limit = {
			has_completed_focus = GER_proportional_representation
		}
		add_to_variable = { GER_Wilhelmine_Constitution_party_popularity_stability_factor = 0.15 }
	}
	if = {
		limit = {
			has_completed_focus = GER_direct_legislation
		}
		add_to_variable = { GER_Wilhelmine_Constitution_political_power_factor = 0.1 }
	}
	if = {
		limit = {
			has_completed_focus = GER_administrative_court
		}
		add_to_variable = { GER_Wilhelmine_Constitution_production_speed_buildings_factor = 0.1 }
		add_to_variable = { GER_Wilhelmine_Constitution_industrial_capacity_factory = 0.1 }
		add_to_variable = { GER_Wilhelmine_Constitution_industrial_capacity_dockyard = 0.1 }
	}
	if = {
		limit = {
			has_completed_focus = GER_uniform_municipal_law
		}
		add_to_variable = { GER_Wilhelmine_Constitution_global_building_slots_factor = 0.2 }
	}
	if = {
		limit = {
			has_completed_focus = GER_federal_police
		}
		add_to_variable = { GER_Wilhelmine_Constitution_compliance_gain = 0.05 }
		add_to_variable = { GER_Wilhelmine_Constitution_resistance_damage_to_garrison = -0.1 }
	}
	hidden_effect = { GER_add_full_parliamentarisation_extra_bonuses = yes }
}
GER_modify_constitution_dynmod_tooltip = {
	if = {
		limit = { has_cosmetic_tag = GER_rep }
		custom_effect_tooltip = {
			localization_key = tooltip_modify_dynmod
			DYNMOD = GER_Republican_Constitution
		}
	}
	else = {
		custom_effect_tooltip = {
			localization_key = tooltip_modify_dynmod
			DYNMOD = GER_Wilhelmine_Constitution
		}
	}
}
GER_add_full_parliamentarisation_extra_bonuses = {
	if = {
		limit = {
			count_triggers = {
				amount = 8
				has_completed_focus = GER_full_parliamentarisation
				has_completed_focus = GER_fundamental_rights
				has_completed_focus = GER_administrative_court
				has_completed_focus = GER_uniform_municipal_law
				has_completed_focus = GER_federal_police
				has_completed_focus = GER_direct_legislation
				has_completed_focus = GER_proportional_representation
				has_completed_focus = GER_women_suffrage
			}
		}
		GER_modify_constitution_dynmod_tooltip = yes
		add_to_variable = {
			GER_Wilhelmine_Constitution_political_power_factor = 0.1
			tooltip = political_power_factor_tooltip
		}
		add_to_variable = {
			GER_Wilhelmine_Constitution_production_speed_buildings_factor = 0.1
			tooltip = production_speed_buildings_factor_tooltip
		}
		add_to_variable = {
			GER_Wilhelmine_Constitution_social_democrat_drift = 0.05
			tooltip = social_democrat_drift_tooltip
		}
	}
}
GER_second_weltkrieg_legacy_effect = {
	if = {
		limit = {
			has_completed_focus = GER_second_weltkrieg_legacy
			check_variable = { GER_demobilisation_final_eco_law < economic_law_current_temp }
		}

		set_variable = { GER_demobilisation_final_eco_law = economic_law_current_temp } #preempts exploits from looping back and forth between laws

		#calculate idea difference
		set_temp_variable = { GER_eco_law_delta = economic_law_current_temp }
		subtract_from_variable = { GER_eco_law_delta = economic_law_previous_temp }
		multiply_temp_variable = { GER_eco_law_delta = 5 } #five factories per level

		#add factories
		if = {
			limit = { check_variable = { GER_eco_law_delta > 0 } }
			effect_tooltip = {
				every_core_state = {
					tooltip = GER_demobilisation_factory_spawn_tt
					add_extra_state_shared_building_slots = 1
					add_building_construction = { type = industrial_complex level = 1 }
				}
			}
			hidden_effect = {
				for_loop_effect = {
					start = 1
					end = GER_eco_law_delta
					compare = less_than_or_equals

					add_one_random_civilian_factory = yes
				}
			}
		}
	}
}

GER_end_demand_for_action = {
	if = {
		limit = {
			has_active_mission = GER_SPD_demand_action
			has_completed_focus = GER_equality_of_sexes
			has_completed_focus = GER_nationalise_coal
			has_completed_focus = GER_municipal_socialism
			has_completed_focus = GER_social_housing
			has_completed_focus = GER_restrict_protective_custody
			has_completed_focus = GER_labour_court
		}
		remove_mission = GER_SPD_demand_action
	}
}

GER_setup_lilleland = {
	GER_roland_koster = {
		set_nationality = LIL
		if = {
			limit = { has_ideology = authoritarian_democrat_subtype }
			promote_character = authoritarian_democrat_subtype
		}
		else = {
			add_country_leader_role = {
				country_leader = {
					desc = GER_roland_koster_leader_desc
					ideology = authoritarian_democrat_subtype
				}
				promote_leader = yes
			}
		}
	}
	LIL = {
		add_state_core = 980
		transfer_state = 980
		give_resource_rights = {
			receiver = ROOT
			state = 980
		}
		get_current_government_type = yes
		ROOT = {
			set_autonomy = {
				target = PREV
				autonomy_state = integrated_puppet
				end_wars = no
			}
		}
		restore_previous_government_type = yes
	}
}

#scope is var:tag_to_release, usually FRP
GER_setup_puppet_france = {
	if = {
		limit = {
			ROOT = {
				has_socialist_government = no
				NOT = { has_completed_focus = GER_restore_civilian_administration }
			}
		}
		set_cosmetic_tag = FRP_military_governorate
		ROOT = {
			GER_fedor_von_bock = {
				set_nationality = PREV.PREV
				if = {
					limit = { has_ideology = paternal_autocrat_subtype }
					promote_character = paternal_autocrat_subtype
				}
				else = {
					add_country_leader_role = {
						country_leader = {
							desc = GER_fedor_von_bock_commander_desc
							ideology = paternal_autocrat_subtype
						}
						promote_leader = yes
					}
				}
			}
		}
		set_politics = {
			ruling_party = paternal_autocrat
			elections_allowed = no
			name = FRP_governorate_paternal_autocrat_party
			long_name = FRP_governorate_paternal_autocrat_party_long
		}
		hidden_effect = {
			FRP_add_debuff = yes
			add_ideas = {
				free_trade
				disarmed_nation
				GER_military_occupation
			}
			set_party_name = {
				ideology = social_democrat
				name = FRA_social_democrat_party
				long_name = FRA_social_democrat_party_long
			}
			set_party_name = {
				ideology = social_liberal
				name = FRA_social_liberal_party
				long_name = FRA_social_liberal_party_long
			}
			set_party_name = {
				ideology = market_liberal
				name = FRA_market_liberal_party
				long_name = FRA_market_liberal_party_long
			}
			set_party_name = {
				ideology = social_conservative
				name = FRA_social_conservative_party
				long_name = FRA_social_conservative_party_long
			}
			set_popularities = {
				totalist = 10
				syndicalist = 20
				radical_socialist = 20
				social_democrat = 0
				social_liberal = 3
				market_liberal = 0
				social_conservative = 4
				authoritarian_democrat = 3
				paternal_autocrat = 40
				national_populist = 0
			}
			every_core_state = {
				force_enable_resistance = { occupier = FRP occupied = FRA }
				if = {
					limit = { is_owned_by = PREV }
					add_claim_by = PREV
				}
				if = {
					limit = { is_controlled_by = PREV }
					if = {
						limit = { has_resistance = yes }
						cancel_resistance = yes
					}
					start_resistance = FRA
				}
			}
			ROOT = { GER_fire_occupation_events_if_not_fired_yet = yes }
		}
	}
}

#scope is var:tag_to_release, usually GBP
GER_setup_puppet_england = {
	if = {
		limit = {
			ROOT = {
				has_socialist_government = no
				NOT = { has_completed_focus = GER_restore_civilian_administration }
			}
		}
		if = {
			limit = { has_variable = GBP_no_scotland }
			set_cosmetic_tag = GBP_england_military_governorate
			hidden_effect = {
				set_party_name = {
					ideology = paternal_autocrat
					long_name = GBP_paternal_autocrat_party_long_england
					name = GBP_paternal_autocrat_party_england
				}
			}
		}
		else = {
			set_cosmetic_tag = GBP_military_governorate
			hidden_effect = {
				set_party_name = {
					ideology = paternal_autocrat
					long_name = GBP_paternal_autocrat_party_long
					name = GBP_paternal_autocrat_party
				}
			}
		}
		ROOT = {
			GER_nikolaus_von_falkenhorst = {
				set_nationality = PREV.PREV
				if = {
					limit = { has_ideology = paternal_autocrat_subtype }
					promote_character = paternal_autocrat_subtype
				}
				else = {
					add_country_leader_role = {
						country_leader = {
							desc = GER_nikolaus_von_falkenhorst_commander_desc
							ideology = paternal_autocrat_subtype
						}
						promote_leader = yes
					}
				}
			}
		}
		set_politics = {
			ruling_party = paternal_autocrat
			elections_allowed = no
			name = GBP_governorate_paternal_autocrat_party
			long_name = GBP_governorate_paternal_autocrat_party_long
		}
		add_ideas = {
			free_trade
			disarmed_nation
			GER_military_occupation
		}
		set_popularities = {
			totalist = 5
			radical_socialist = 12
			syndicalist = 13
			social_democrat = 6
			social_liberal = 14
			market_liberal = 5
			social_conservative = 1
			authoritarian_democrat = 0
			paternal_autocrat = 44
			national_populist = 0
		}
		every_core_state = {
			force_enable_resistance = { occupier = GBP occupied = ENG }
			if = {
				limit = { is_owned_by = PREV }
				add_claim_by = PREV
			}
			if = {
				limit = { is_controlled_by = PREV }
				if = {
					limit = { has_resistance = yes }
					cancel_resistance = yes
				}
				start_resistance = ENG
			}
		}
		ROOT = { GER_fire_occupation_events_if_not_fired_yet = yes }
	}
	else = {
		GBP_set_up_government = yes
	}
}

GER_modify_occupation = {
	every_subject_country = {
		limit = { GER_is_military_governorate = yes }
		if = {
			limit = { has_idea = GER_military_occupation }
			swap_ideas = {
				remove_idea = GER_military_occupation
				add_idea = GER_military_occupation_2
			}
		}
		else_if = {
			limit = { has_idea = GER_military_occupation_2 }
			swap_ideas = {
				remove_idea = GER_military_occupation_2
				add_idea = GER_military_occupation_3
			}
		}
		else_if = {
			limit = { has_idea = GER_military_occupation_3 }
			swap_ideas = {
				remove_idea = GER_military_occupation_3
				add_idea = GER_military_occupation_4
			}
		}
		else_if = {
			limit = { has_idea = GER_military_occupation_4 }
			swap_ideas = {
				remove_idea = GER_military_occupation_4
				add_idea = GER_military_occupation_5
			}
		}
	}
}

GER_fire_occupation_events_if_not_fired_yet = {
	if = {
		limit = { NOT = { has_country_flag = GER_occupation_events_set_up } }
		set_country_flag = GER_occupation_events_set_up
		GER_occupation_event = yes
	}
}

GER_occupation_event = {
	hidden_effect = {
		random_list = {
			30 = {
				country_event = { id = gerflavour.58 days = 90 random_days = 10 }
			}
			10 = {
				country_event = { id = gerflavour.59 days = 90 random_days = 10 }
			}
			10 = {
				country_event = { id = gerflavour.60 days = 90 random_days = 10 }
			}
			10 = {
				country_event = { id = gerflavour.61 days = 90 random_days = 10 }
			}
			10 = {
				country_event = { id = gerflavour.62 days = 90 random_days = 10 }
			}
		}
	}
}
GER_establish_puppet_parties_effect = {
	hidden_effect = {
		every_country_with_original_tag = {
			original_tag_to_check = FRP
			limit = { GER_is_french_military_governorate_puppet = yes }
			set_party_name = {
				ideology = social_democrat
				name = FRP_social_democrat_party
				long_name = FRP_social_democrat_party_long
			}
			set_party_name = {
				ideology = social_liberal
				name = FRP_social_liberal_party
				long_name = FRP_social_liberal_party_long
			}
			set_party_name = {
				ideology = market_liberal
				name = FRP_market_liberal_party
				long_name = FRP_market_liberal_party_long
			}
			set_party_name = {
				ideology = social_conservative
				name = FRP_social_conservative_party
				long_name = FRP_social_conservative_party_long
			}
			add_popularity = {
				ideology = syndicalist
				popularity = -0.05
			}
			add_popularity = {
				ideology = radical_socialist
				popularity = -0.05
			}
			add_popularity = {
				ideology = totalist
				popularity = -0.025
			}
			add_popularity = {
				ideology = market_liberal
				popularity = 0.01
			}
			add_popularity = {
				ideology = social_democrat
				popularity = 0.01
			}
		}
		every_country_with_original_tag = {
			original_tag_to_check = GBP
			limit = { GER_is_british_military_governorate_puppet = yes }
			set_party_name = {
				ideology = totalist
				name = ENG_GER_totalist_party
				long_name = ENG_GER_totalist_party_long
			}
			set_party_name = {
				ideology = syndicalist
				name = ENG_GER_syndicalist_party
				long_name = ENG_GER_syndicalist_party_long
			}
			set_party_name = {
				ideology = radical_socialist
				name = ENG_GER_radical_socialist_party
				long_name = ENG_GER_radical_socialist_party_long
			}
			set_party_name = {
				ideology = social_democrat
				name = ENG_GER_social_democrat_party
				long_name = ENG_GER_social_democrat_party_long
			}
			set_party_name = {
				ideology = social_liberal
				name = ENG_GER_social_liberal_party
				long_name = ENG_GER_social_liberal_party_long
			}
			set_party_name = {
				ideology = market_liberal
				name = ENG_GER_market_liberal_party
				long_name = ENG_GER_market_liberal_party_long
			}
			set_party_name = {
				ideology = social_conservative
				name = ENG_GER_social_conservative_party
				long_name = ENG_GER_social_conservative_party_long
			}
			set_party_name = {
				ideology = authoritarian_democrat
				name = ENG_GER_authoritarian_democrat_party
				long_name = ENG_GER_authoritarian_democrat_party_long
			}
			set_party_name = {
				ideology = paternal_autocrat
				name = ENG_GER_paternal_autocrat_party
				long_name = ENG_GER_paternal_autocrat_party_long
			}
			set_party_name = {
				ideology = national_populist
				name = ENG_GER_national_populist_party
				long_name = ENG_GER_national_populist_party_long
			}
		}
	}
}
GER_establish_puppet_popularities_effect = {
	hidden_effect = {
		every_country_with_original_tag = {
			original_tag_to_check = FRP
			limit = { GER_is_french_military_governorate_puppet = yes }
			if = {
				limit = {
					GER = {
						OR = {
							GER_is_schleicher_path = yes
							AND = {
								GER_is_swr_path = yes
								NFA = {
									has_government = national_populist
								}
							}
						}
					}
				}
				set_popularities = {
					totalist = 1
					radical_socialist = 3
					syndicalist = 3
					social_democrat = 10
					social_liberal = 8
					market_liberal = 8
					social_conservative = 16
					authoritarian_democrat = 36
					paternal_autocrat = 12
					national_populist = 3
				}
			}
			else_if = {
				limit = {
					GER = {
						GER_is_du_path = yes
					}
				}
				set_popularities = {
					totalist = 1
					radical_socialist = 3
					syndicalist = 3
					social_democrat = 8
					social_liberal = 8
					market_liberal = 14
					social_conservative = 26
					authoritarian_democrat = 24
					paternal_autocrat = 10
					national_populist = 3
				}
			}
			else = {
				set_popularities = {
					totalist = 1
					radical_socialist = 3
					syndicalist = 3
					social_democrat = 6
					social_liberal = 8
					market_liberal = 8
					social_conservative = 16
					authoritarian_democrat = 28
					paternal_autocrat = 16
					national_populist = 11
				}
			}
		}
		every_country_with_original_tag = {
			original_tag_to_check = GBP
			limit = { GER_is_british_military_governorate_puppet = yes }
			if = {
				limit = {
					GER = {
						GER_is_schleicher_path = yes
					}
				}
				set_popularities = {
					totalist = 2
					radical_socialist = 2
					syndicalist = 1
					social_democrat = 10
					social_liberal = 12
					market_liberal = 12
					social_conservative = 8
					authoritarian_democrat = 33
					paternal_autocrat = 14
					national_populist = 6
				}
			}
			else_if = {
				limit = {
					GER = {
						GER_is_du_path = yes
					}
				}
				set_popularities = {
					totalist = 2
					radical_socialist = 2
					syndicalist = 1
					social_democrat = 20
					social_liberal = 16
					market_liberal = 4
					social_conservative = 16
					authoritarian_democrat = 23
					paternal_autocrat = 10
					national_populist = 6
				}
			}
			else = {
				set_popularities = {
					totalist = 6
					radical_socialist = 2
					syndicalist = 1
					social_democrat = 5
					social_liberal = 10
					market_liberal = 6
					social_conservative = 10
					authoritarian_democrat = 25
					paternal_autocrat = 25
					national_populist = 10
				}
			}
		}
	}
}
GER_spawn_five_ships = {
	if = {
		limit = { has_dlc_mtg = yes }
		if = {
			limit = { NOT = { has_tech = improved_ship_hull_light } }
			custom_override_tooltip = {
				tooltip = {
					localization_key = tooltip_add_tech
					TECH = ship_hull_light_3
				}
				set_technology = { improved_ship_hull_light = 1 }
			}
		}
		if = {
			limit = {
				has_tech = cavity_magnatron
				has_tech = improved_depth_charges
			}
			create_equipment_variant = {
				name = "Wilhelm I Class"
				type = ship_hull_light_3
				show_position = no
				role_icon_index = 2
				modules = {
					fixed_ship_battery_slot = ship_light_battery_2
					fixed_ship_anti_air_slot = ship_anti_air_2
					fixed_ship_fire_control_system_slot = ship_fire_control_system_0
					fixed_ship_radar_slot = ship_radar_2
					fixed_ship_torpedo_slot = ship_torpedo_2
					fixed_ship_engine_slot = light_ship_engine_2

					front_1_custom_slot = ship_anti_air_2
					mid_1_custom_slot = ship_torpedo_2
					rear_1_custom_slot = ship_depth_charge_2
				}
			}
		}
		else_if = {
			limit = {
				has_tech = cavity_magnatron
			}
			create_equipment_variant = {
				name = "Wilhelm I Class"
				type = ship_hull_light_3
				show_position = no
				role_icon_index = 2
				modules = {
					fixed_ship_battery_slot = ship_light_battery_2
					fixed_ship_anti_air_slot = ship_anti_air_2
					fixed_ship_fire_control_system_slot = ship_fire_control_system_0
					fixed_ship_radar_slot = ship_radar_2
					fixed_ship_torpedo_slot = ship_torpedo_2
					fixed_ship_engine_slot = light_ship_engine_2

					front_1_custom_slot = ship_anti_air_1
					mid_1_custom_slot = ship_torpedo_2
					rear_1_custom_slot = ship_depth_charge_1
				}
			}
		}
		else_if = {
			limit = {
				has_tech = improved_depth_charges
			}
			create_equipment_variant = {
				name = "Wilhelm I Class"
				type = ship_hull_light_3
				show_position = no
				role_icon_index = 2
				modules = {
					fixed_ship_battery_slot = ship_light_battery_2
					fixed_ship_anti_air_slot = ship_anti_air_2
					fixed_ship_fire_control_system_slot = ship_fire_control_system_0
					fixed_ship_radar_slot = ship_sonar_1
					fixed_ship_torpedo_slot = ship_torpedo_2
					fixed_ship_engine_slot = light_ship_engine_2

					front_1_custom_slot = ship_anti_air_1
					mid_1_custom_slot = ship_torpedo_2
					rear_1_custom_slot = ship_depth_charge_2
				}
			}
		}
		else = {
			create_equipment_variant = {
				name = "Wilhelm I Class"
				type = ship_hull_light_3
				show_position = no
				role_icon_index = 2
				modules = {
					fixed_ship_battery_slot = ship_light_battery_2
					fixed_ship_anti_air_slot = ship_anti_air_2
					fixed_ship_fire_control_system_slot = ship_fire_control_system_0
					fixed_ship_radar_slot = ship_sonar_1
					fixed_ship_torpedo_slot = ship_torpedo_2
					fixed_ship_engine_slot = light_ship_engine_2

					front_1_custom_slot = ship_anti_air_1
					mid_1_custom_slot = ship_torpedo_2
					rear_1_custom_slot = ship_depth_charge_1
				}
			}
		}
		create_ship = { type = ship_hull_light_3 equipment_variant = "Wilhelm I Class" creator = GER name = "Frankfurt" }
		create_ship = { type = ship_hull_light_3 equipment_variant = "Wilhelm I Class" creator = GER name = "Dresden" }
		create_ship = { type = ship_hull_light_3 equipment_variant = "Wilhelm I Class" creator = GER name = "Erfurt" }
		create_ship = { type = ship_hull_light_3 equipment_variant = "Wilhelm I Class" creator = GER name = "Nuremberg" }
		create_ship = { type = ship_hull_light_3 equipment_variant = "Wilhelm I Class" creator = GER name = "Stuttgart" }
		add_equipment_production = {
			equipment = {
				type = ship_hull_light_3
				creator = GER
				version_name = "Wilhelm I Class"
			}
			requested_factories = 3
			progress = 0.35
			amount = 1
		}
		add_equipment_production = {
			equipment = {
				type = ship_hull_light_3
				creator = GER
				version_name = "Wilhelm I Class"
			}
			requested_factories = 3
			progress = 0.25
			amount = 1
		}
	}
	else = {
		if = {
			limit = { NOT = { has_tech = improved_destroyer } }
			custom_override_tooltip = {
				tooltip = {
					localization_key = tooltip_add_tech
					TECH = destroyer_3
				}
				set_technology = { improved_destroyer = 1 }
			}
		}

		create_ship = { type = destroyer_3 equipment_variant = "Advanced Destroyer" creator = GER name = "Frankfurt" }
		create_ship = { type = destroyer_3 equipment_variant = "Advanced Destroyer" creator = GER name = "Dresden" }
		create_ship = { type = destroyer_3 equipment_variant = "Advanced Destroyer" creator = GER name = "Erfurt" }
		create_ship = { type = destroyer_3 equipment_variant = "Advanced Destroyer" creator = GER name = "Nuremberg" }
		create_ship = { type = destroyer_3 equipment_variant = "Advanced Destroyer" creator = GER name = "Stuttgart" }
		add_equipment_production = {
			equipment = {
				type = destroyer_3
				creator = GER
				version_name = "Advanced Destroyer"
			}
			requested_factories = 3
			progress = 0.35
			amount = 1
		}
		add_equipment_production = {
			equipment = {
				type = destroyer_3
				creator = GER
				version_name = "Advanced Destroyer"
			}
			requested_factories = 3
			progress = 0.25
			amount = 1
		}
	}
}
GER_USA_militias_spawn_effect = {
	division_template = {
		name = "German Militia Division"
		regiments = {
			infantry = { x = 0 y = 0 }
			infantry = { x = 0 y = 1 }
			infantry = { x = 0 y = 2 }
			infantry = { x = 1 y = 0 }
			infantry = { x = 1 y = 1 }
			infantry = { x = 1 y = 2 }
		}
	}
	random_owned_controlled_state = {
		limit = { valid_state_for_spawning_friendly_unit = yes }
		create_unit = {
			division = "name = \"1. German-American Self-Defense Division\" division_template = \"German Militia Division\" start_experience_factor = 0.3"
			allow_spawning_on_enemy_provs = no
			owner = PREV
		}
		create_unit = {
			division = "name = \"2. German-American Self-Defense Division\" division_template = \"German Militia Division\" start_experience_factor = 0.3"
			allow_spawning_on_enemy_provs = no
			owner = PREV
		}
		create_unit = {
			division = "name = \"3. German-American Self-Defense Division\" division_template = \"German Militia Division\" start_experience_factor = 0.3"
			allow_spawning_on_enemy_provs = no
			owner = PREV
		}
	}
}

GER_remove_grip_decisions = {
	if = {
		limit = {
			OR = {
				AND = { #Altgardisten
					has_completed_focus = GER_adapt_weltkrieg_experience
					has_completed_focus = GER_strengthen_branch_cooperation
					has_completed_focus = GER_foster_aristocratic_tradition
					has_completed_focus = GER_mobile_artillery
					has_completed_focus = GER_aggressive_breakthrough
				}
				AND = { #Die Fronde
					has_completed_focus = GER_counteroffensive_strategies
					has_completed_focus = GER_faith_in_german_race
					has_completed_focus = GER_stay_behind_units
					has_completed_focus = GER_rapid_mobilisation
					has_completed_focus = GER_military_ideology
				}
				AND = { #Reformisten
					has_completed_focus = GER_training_standards
					has_completed_focus = GER_combined_arms_offensive
					has_completed_focus = GER_interservice_cooperation
					has_completed_focus = GER_abolish_immediatrecht
					has_completed_focus = GER_general_staff_reform
					has_completed_focus = GER_abolition_of_federal_armies
				}
			}
			OR = { #Airforce
				has_completed_focus = GER_wever_doctrine
				has_completed_focus = GER_richthofen_doctrine
				has_completed_focus = GER_knauss_doctrine
			}
			OR = { #Navy
				has_completed_focus = GER_wegener_doctrine
				has_completed_focus = GER_raeder_doctrine
			}
		}
		hidden_effect = {
			remove_targeted_decision = { target = THIS decision = GER_levy_support_in_federal_states }
			remove_targeted_decision = { target = THIS decision = GER_levy_support_in_reichstag }
			remove_targeted_decision = { target = THIS decision = GER_threat_assessments }
		}
	}
}

GER_nullification_zentrum_right_tooltip = {
	if = {
		limit = { GER_nullification_zentrum_right_aligned = yes }
		custom_effect_tooltip = GER_null_zentrum_right_tt
	}
}
GER_nullification_zentrum_opposed_tooltip = {
	if = {
		limit = { GER_nullification_zentrum_right_not_aligned = yes }
		custom_effect_tooltip = GER_null_zentrum_opposed_tt
	}
}
GER_nullification_cooperative_tooltip = {
	if = {
		limit = { GER_nullification_schleicher_centralisation_once = no }
		custom_effect_tooltip = GER_null_cooperative_tt
	}
}
GER_nullification_aggressive_tooltip = {
	if = {
		limit = { GER_nullification_schleicher_centralisation_twice = yes }
		custom_effect_tooltip = GER_null_aggressive_tt
	}
}
GER_nullification_aggressive_front_tooltip = {
	if = {
		limit = { GER_nullification_schleicher_centralisation_twice = yes }
		custom_effect_tooltip = GER_null_aggressive_tt
		if = {
			limit = { GER_nullification_national_unity_front = yes }
			custom_effect_tooltip = GER_null_aggressive_front_tt
		}
	}
}
GER_nullification_passive_front_tooltip = {
	if = {
		limit = { GER_nullification_national_unity_front = yes }
		custom_effect_tooltip = GER_null_passive_front_tt
	}
}
GER_nullification_passive_front_not_agressive_tooltip = {
	if = {
		limit = {
			GER_nullification_national_unity_front = yes
			GER_nullification_schleicher_centralisation_once = no
		}
		custom_effect_tooltip = GER_null_passive_front_tt
	}
}
GER_nullification_front_hated_tooltip = {
	if = {
		limit = { GER_nullification_national_unity_front = yes }
		custom_effect_tooltip = GER_null_front_hated_tt
	}
}
GER_nullification_spd_friendship_tooltip = {
	if = {
		limit = { GER_nullification_spd_friendship = yes }
		custom_effect_tooltip = GER_null_spd_friendship_tt
	}
}
GER_nullification_spd_hated_tooltip = {
	if = {
		limit = { GER_nullification_spd_friendship = yes }
		custom_effect_tooltip = GER_null_spd_hated_tt
	}
}
GER_nullification_dvlp_friendship_tooltip = {
	if = {
		limit = { GER_nullification_dvlp_friendship = yes }
		custom_effect_tooltip = GER_null_dvlp_friendship_tt
	}
}
GER_nullification_military_oversight_tooltip = {
	if = {
		limit = { GER_nullification_military_oversight = yes }
		custom_effect_tooltip = GER_null_military_oversight_tt
	}
}
GER_nullification_secret_police_tooltip = {
	if = {
		limit = { has_completed_focus = GER_nationalise_prussian_secret_police }
		custom_effect_tooltip = GER_null_secret_police_tt
	}
}
GER_nullification_authoritarian_luxembourg_tooltip = {
	if = {
		limit = { GER_nullification_authoritarian_luxembourg = yes }
		custom_effect_tooltip = GER_null_authoritarian_luxembourg_tt
	}
}
GER_nullification_thyssen_pact_tooltip = {
	if = {
		limit = { GER_nullification_thyssen_pact = yes }
		custom_effect_tooltip = GER_null_thyssen_pact_tt
	}
}
GER_nullification_thyssen_pact_hated_tooltip = {
	if = {
		limit = { GER_nullification_thyssen_pact = yes }
		custom_effect_tooltip = GER_null_thyssen_pact_hated_tt
	}
}
GER_nullification_reichsexecution_successful_tooltip = {
	if = {
		limit = { GER_nullification_reichsexecution_successful = yes }
		custom_effect_tooltip = GER_null_reichexec_successful_tt
	}
}
GER_nullification_reichsexecution_unsuccessful_tooltip = {
	if = {
		limit = { GER_nullification_reichsexecution_unsuccessful = yes }
		custom_effect_tooltip = GER_null_reichexec_unsuccessful_tt
	}
}

GER_postwar_swr_elected_effect = {
	add_stability = 0.05
	if = {
		limit = {
			OR = {
				has_completed_focus = GER_abolish_universal_suffrage
				AND = {
					check_variable = { GER_swr_foci_taken > 2 }
					check_variable = { GER_swr_dkp_foci_taken < GER_swr_dvlp_foci_taken }
				}
			}
		}
		set_politics = {
			ruling_party = paternal_autocrat
			election_frequency = 60
			elections_allowed = yes
		}
		if = {
			limit = { has_completed_focus = GER_defang_german_liberalism }
			set_temp_variable = { coalition_partner_var = token:market_liberal }
			add_to_coalition = yes
		}
		set_temp_variable = { coalition_partner_var = token:authoritarian_democrat }
		add_to_coalition = yes
	}
	else = {
		set_politics = {
			ruling_party = authoritarian_democrat
			election_frequency = 60
			elections_allowed = yes
		}
		if = {
			limit = { has_completed_focus = GER_defang_german_liberalism }
			set_temp_variable = { coalition_partner_var = token:market_liberal }
			add_to_coalition = yes
		}
		set_temp_variable = { coalition_partner_var = token:paternal_autocrat }
		add_to_coalition = yes
	}
	set_temp_variable = { coalition_partner_var = token:national_populist }
	add_to_coalition = yes
}

GER_austrian_general_swap = {
	set_portraits = {
		character = AUS_erhard_raus
		army = {
			large = GFX_portrait_AUS_erhard_raus_german_army_large
			small = GFX_portrait_AUS_erhard_raus_german_army_small
		}
	}
	set_portraits = {
		character = AUS_lothar_rendulic
		army = {
			large = GFX_portrait_AUS_lothar_rendulic_german_army_large
			small = GFX_portrait_AUS_lothar_rendulic_german_army_small
		}
	}
	set_portraits = {
		character = AUS_karl_eglseer
		army = {
			large = GFX_portrait_AUS_karl_eglseer_german_army_large
			small = GFX_portrait_AUS_karl_eglseer_german_army_small
		}
	}
	set_portraits = {
		character = AUS_julius_ringel
		army = {
			large = GFX_portrait_AUS_julius_ringel_german_army_large
			small = GFX_portrait_AUS_julius_ringel_german_army_small
		}
	}
	set_portraits = {
		character = AUS_franz_bohme
		army = {
			large = GFX_portrait_AUS_franz_bohme_german_army_large
			small = GFX_portrait_AUS_franz_bohme_german_army_small
		}
	}
	set_portraits = {
		character = AUS_friedrich_materna
		army = {
			large = GFX_portrait_AUS_friedrich_materna_german_army_large
			small = GFX_portrait_AUS_friedrich_materna_german_army_small
		}
	}
	set_portraits = {
		character = AUS_ludwig_von_eimannsberger
		army = {
			large = GFX_portrait_AUS_ludwig_von_eimannsberger_german_army_large
			small = GFX_portrait_AUS_ludwig_von_eimannsberger_german_army_small
		}
	}
}
