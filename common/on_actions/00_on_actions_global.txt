### GLOBAL ON ACTIONS FILE ###
### COUNTRY-SPECIFIC ACTIONS SHOULD GO INTO THEIR OWN FILES ###
### DON'T EDIT THIS FILE WITHOUT CHECKING IN THE CODING CHANNEL FIRST ###

on_actions = {
	### LaR DLC
	# called when an operative performing an offensive mission in a country
	# has been spotted
	on_operative_on_mission_spotted = {

		effect = {
			log = "on_operative_on_mission_spotted [GetLogThis] [GetLogRoot] [GetLogFrom]"
			# SCOPE the operative
			# ROOT   the country the operative was performing its mission in
			# FROM   the country the operative is operating for

			# base values
			set_temp_variable = {
				var = capture_chance
				value = 90
			}
			set_temp_variable = {
				var = kill_chance
				value = 10
			}

			# nullify kill chance for some missions
			if = {
				limit = {
					OR = {
						operative_leader_mission = control_trade
						operative_leader_mission = diplomatic_pressure
					}
				}
				set_temp_variable = {
					var = kill_chance
					value = 0
				}
			}

			# Capture chance modifier unused as it would just increased or decrease death chance
			#multiply_temp_variable = {
			#   var = capture_chance
			#   value = own_capture_chance_factor # the operative's capture chance modifiers
			#}
			#clamp_temp_variable = {
			#   var = capture_chance
			#   min = 0
			#   max = 100
			#}

			random_list = {
				#log = yes # log picked effect in game.log
				temp_var:capture_chance = {
					capture_operative = {
						captured_by = ROOT
					}
				}
				temp_var:kill_chance = {
					kill_operative = {
						killed_by = ROOT
					}
				}
			}
		}
	}

	on_operative_captured = {
		effect = {
			log = "on_operative_captured [GetLogThis] [GetLogRoot] [GetLogFrom]"
			# SCOPE the operative
			# ROOT   the country the operative was performing its mission in
			# FROM   the country the operative is operating for
			operative_leader_event = {
				id = lar_operative_event.6
				recipient = ROOT
				originator = ROOT
				set_from_from = ROOT
				set_from = FROM
				days = 1
			}
			random_list = {
				log = yes
				90 = { #regular
					operative_leader_event = {
						id = lar_operative_event.1
						set_from_from = ROOT
					}
				}
				10 = { #operative turned
					modifier = {
						has_trait = operative_tough
						factor = 0 #tough operatives never get turned
					}
					modifier = {
						has_trait = operative_double_agent
						factor = 0 #no tripple agents please
					}
					turn_operative = { turned_by = ROOT }
					# ensure the operative has the nationality of the country he is coming from
					add_nationality = FROM
					operative_leader_event = {
						id = lar_operative_event.5
						set_from_from = FROM #tells the event which nationality to add
					}
				}
			}
		}
	}

	# SCOPE the operative
	# ROOT   the killer country (optional)
	# FROM   the country the operative is operating for
	on_operative_death = {
		effect = {
			if = {
				limit = { country_exists = ROOT }
				log = "on_operative_death [GetLogThis] [GetLogRoot] [GetLogFrom]"
				# operative killed by a country, likelly while on mission
				operative_leader_event = {
					id = lar_operative_event.3
					set_from_from = ROOT
				}
			}
			else = {
				log = "on_operative_death [GetLogThis] [GetLogFrom]"
				# other cause of death
			}
		}
	}

	# SCOPE_UNIT_LEADER [
	#	ROOT, FROM
	#	FROM.FROM : SCOPE_STATE ( will only be set if the operation has a specific selection_target )
	# ]
	on_operative_detected_during_operation = {
		effect = {
			log = "on_operative_detected_during_operation [GetLogThis] [GetLogRoot] [GetLogFrom] [GetLogFromFrom]"
			random_list = {
				45 = {
					force_operative_leader_into_hiding = 45
					operative_leader_event = {
						id = lar_operative_event.2
						set_from_from = FROM
					}
				}
				25 = {
					capture_operative = {
						captured_by = FROM
					}
				}
				25 = {
					harm_operative_leader = 90
					operative_leader_event = {
						id = lar_operative_event.4
						set_from_from = FROM
					}
				}
				5 = {
					kill_operative = {
						killed_by = FROM
					}
				}
			}
		}
	}

	# scope is operative
	# from scope is the country
	on_operative_created = {
		effect = {
			log = "on_operative_created [GetLogThis] [GetLogRoot] [GetLogFrom] [GetLogFromFrom]"
			add_operative_nationalities = yes
		}
	}

	# same scope setup as in operation outcome:
	# THIS: the operation
	# ROOT: the initiating country
	# FROM: the target country
	on_operation_completed = {
		effect = {
			log = "on_operation_completed [GetLogThis] [GetLogRoot] [GetLogFrom] [GetLogFromFrom]"
			if = {
				limit = {
					ROOT = { has_country_flag = just_freed_operative_flag }
				}
				every_operative = {
					if = {
						limit = {
							NOT = { has_trait = operative_escape_artist }
						}
						random_list = {
							15 = { add_unit_leader_trait = operative_escape_artist }
							85 = {}
						}
					}
				}
				ROOT = { clr_country_flag = just_freed_operative_flag }
			}
			every_operative = { #add target nationality if linguist
				if = {
					limit = {
						has_trait = operative_linguist
						NOT = { has_nationality = FROM }
					}
					random_list = {
						20 = { add_nationality = FROM }
						80 = {}
					}
				}
			}
		}
	}

	on_weekly = {
		effect = {
			# update intelligence agency AI
			if = {
				limit = {
					has_intelligence_agency = yes
					is_ai = yes
				}
				update_operation_ai = yes
			}

			#bypass not calling puppets into war exploit
			country_event = ai_events.100

			#force the AI to build air bases if low on space
			country_event = ai_events.212

			#annexation failsafe
			recheck_annexations = yes
		}
	}

	on_monthly = {
		effect = {
			# maintain list of guarantors
			if = {
				limit = { has_variable = guarantor_array^num } #the array exists
				for_each_loop = {
					array = guarantor_array
					if = {
						limit = { NOT = { is_guaranteed_by = var:v } }
						add_to_temp_array = { guarantors_to_remove = v }
					}
				}
				if = {
					limit = { check_variable = { guarantors_to_remove^num = guarantor_array^num } }
					clear_array = guarantor_array
				}
				else = {
					for_each_loop = {
						array = guarantors_to_remove
						remove_from_array = { guarantor_array = v }
					}
				}
			}

			### Data logging - do not touch this section
			if = {
				limit = {
					is_valid_tag_for_data_logging = yes
					check_variable = { var = THIS.KR_data_logging_months value = 2 }
				}
				if = {
					limit = { tag = AUS }
					set_temp_variable = { AUS.empire_num_divisions = num_divisions }
					set_temp_variable = { AUS.empire_num_wanted_divisions = ai_wants_divisions }
					set_temp_variable = { AUS.empire_num_max_divisions = max_divisions }
					set_temp_variable = { AUS.empire_civ_industry = num_of_civilian_factories }
					set_temp_variable = { AUS.empire_mil_industry = num_of_military_factories }
					set_temp_variable = { AUS.empire_nav_industry = num_of_naval_factories }
					every_other_country = {
						limit = { has_autonomy_state = crownland }
						add_to_variable = { var = AUS.empire_num_divisions value = num_divisions }
						add_to_variable = { var = AUS.empire_num_wanted_divisions value = ai_wants_divisions }
						add_to_variable = { var = AUS.empire_num_max_divisions value = max_divisions }
						add_to_variable = { var = AUS.empire_civ_industry value = num_of_civilian_factories }
						add_to_variable = { var = AUS.empire_mil_industry value = num_of_military_factories }
						add_to_variable = { var = AUS.empire_nav_industry value = num_of_naval_factories }
					}
					log = "KR_division_data;[GetYear].[GetMonth];[Root.GetTag];[?AUS.empire_num_divisions];[?AUS.empire_num_wanted_divisions];[?AUS.empire_num_max_divisions]"
					log = "KR_industry_data;[GetYear].[GetMonth];[Root.GetTag];[?AUS.empire_civ_industry];[?AUS.empire_mil_industry];[?AUS.empire_nav_industry]"
				}
				else = {
					log = "KR_division_data;[GetYear].[GetMonth];[Root.GetTag];[?num_divisions];[?ai_wants_divisions];[?max_divisions]"
					log = "KR_industry_data;[GetYear].[GetMonth];[Root.GetTag];[?num_of_civilian_factories];[?num_of_military_factories];[?num_of_naval_factories]"
				}
				clear_variable = THIS.KR_data_logging_months
			}
			else_if = {
				limit = {
					is_valid_tag_for_data_logging = yes
					NOT = { check_variable = { var = THIS.KR_data_logging_months value = 2 } }
				}
				add_to_variable = { THIS.KR_data_logging_months = 1 }
			}
			else_if = {
				# Debug tag for global values logging
				limit = { tag = BHU }
				log = "KR_tension_data;[GetYear].[GetMonth];[?global.threat]"
			}
		}
	}

	on_startup = {
		effect = {
			log = "=== MOD VERSION ==="
			log = KR_CURRENT_VERSION

			every_possible_country = {
				limit = { NOT = { tag = event_target:system } }

				#Opinion Modifiers Setup
				every_possible_country = {
					limit = { NOT = { tag = PREV } }
					if = {
						limit = { has_government = PREV }
						add_opinion_modifier = {
							target = PREV
							modifier = KR_same_ideology
						}
					}
					else_if = {
						limit = {
							OR = {
								AND = {
									OR = {
										has_government = social_conservative
										has_government = authoritarian_democrat
									}
									PREV = {
										OR = {
											has_government = social_conservative
											has_government = authoritarian_democrat
										}
									}
								}
								AND = {
									OR = {
										has_government = social_democrat
										has_government = social_liberal
									}
									PREV = {
										OR = {
											has_government = social_democrat
											has_government = social_liberal
										}
									}
								}
							}
						}
						add_opinion_modifier = {
							target = PREV
							modifier = KR_similar_ideology_close
						}
					}
					else_if = {
						limit = {
							OR = {
								AND = {
									has_government = social_democrat
									PREV = {
										OR = {
											has_government = market_liberal
											has_government = social_conservative
											has_government = authoritarian_democrat
										}
									}
								}
								AND = {
									OR = {
										has_government = market_liberal
										has_government = social_conservative
										has_government = authoritarian_democrat
									}
									PREV = { has_government = social_democrat }
								}
								AND = {
									has_government = totalist
									PREV = { has_government = radical_socialist }
								}
								AND = {
									has_government = radical_socialist
									PREV = { has_government = totalist }
								}
							}
						}
						add_opinion_modifier = {
							target = PREV
							modifier = KR_similar_ideology_distant
						}
					}
					else_if = {
						limit = {
							OR = {
								AND = {
									has_socialist_government = yes
									PREV = { has_socialist_government = yes }
								}
								AND = {
									has_democratic_government = yes
									PREV = { has_democratic_government = yes }
								}
								AND = {
									has_dictatorship_government = yes
									PREV = { has_dictatorship_government = yes }
								}
								AND = {
									OR = {
										has_government = authoritarian_democrat
										has_government = paternal_autocrat
									}
									PREV = {
										OR = {
											has_government = authoritarian_democrat
											has_government = paternal_autocrat
										}
									}
								}
							}
						}
						add_opinion_modifier = {
							target = PREV
							modifier = KR_similar_ideology
						}
					}
					else_if = {
						limit = {
							OR = {
								AND = {
									has_government = social_democrat
									PREV = { has_government = radical_socialist }
								}
								AND = {
									has_government = radical_socialist
									PREV = { has_government = social_democrat }
								}
								AND = {
									has_government = paternal_autocrat
									PREV = { has_government = social_conservative }
								}
								AND = {
									has_government = social_conservative
									PREV = { has_government = paternal_autocrat }
								}
								AND = {
									has_government = national_populist
									PREV = {
										OR = {
											has_government = social_conservative
											has_government = authoritarian_democrat
										}
									}
								}
								AND = {
									OR = {
										has_government = social_conservative
										has_government = authoritarian_democrat
									}
									PREV = { has_government = national_populist }
								}
							}
						}
						add_opinion_modifier = {
							target = PREV
							modifier = KR_different_ideology_close
						}
					}
					else = {
						add_opinion_modifier = {
							target = PREV
							modifier = KR_different_ideology
						}
					}
				}
			}

			every_country = { unit_limit_calculation_effect = yes }

			# Set up news events settings
			set_global_flag = NEWS_ALL
			set_variable = { global.world_news_frame = 2 }
			set_global_flag = NEWS_SOME
			set_variable = { global.regional_news_frame = 2 }

			# Enable STT if set in rules
			if = {
				limit = { NOT = { has_game_rule = { rule = state_transfer_tool_options option = STANDARD } } }
				set_global_flag = transfer_enabled
			}

			#UI Setup
			for_each_scope_loop = {
				array = global.players
				open_intro_screen = yes
			}
			random_country = { #has_dlc doesn't work in the default global scope
				if = {
					limit = { has_dlc_lar = no }
					set_variable = { global.unit_limit_alert_position = -55 } #changes the position of the alert icon
				}
				else = {
					clear_variable = global.unit_limit_alert_position
				}
			}

			#Events
			random_scope_in_array = {
				array = global.players
				country_event = { id = worldnews.13 days = 1096 random_days = 180 }
			}

			#Ambition Areas
			every_state = {
				create_ambition_areas = yes
				if = {
					limit = {
						OR = {
							has_state_category = wasteland
							has_state_category = major_port
							has_state_category = port
							has_state_category = minor_port
							has_state_category = one_island
							has_state_category = zero_island
						}
					}
					set_state_flag = is_insignificant_state_for_peace_conference
				}

				#disable resistance for tags that shouldn't generate it
				force_disable_resistance = { occupied = BAT } #resistance should come from Latvia/Estonia
				force_disable_resistance = { occupied = MAF } #resistance should come from African tags
				force_disable_resistance = { occupied = GEA } #resistance should come from SEA tags or China
				force_disable_resistance = { occupied = DEI } #resistance should come from Indonesia
			}

			#Faction Embargoes
			every_possible_country = {
				limit = {
					has_socialist_government = yes
					is_dynamic_country = no
				}
				for_each_scope_loop = {
					array = ENT.faction_members
					embargo_PREV = yes
					PRF = { embargo_PREV = yes } #PRF vs RAJ
				}
				for_each_scope_loop = {
					array = GER.faction_members
					embargo_PREV = yes
				}
				RAJ = { embargo_PREV = yes }
				SRD = { embargo_PREV = yes }
				BUL = { embargo_PREV = yes }
				TUR = { embargo_PREV = yes }
				SWI = { embargo_PREV = yes }
				PRF = { embargo_PREV = yes }
			}

			#Data logging variable
			every_possible_country = {
				limit = { is_valid_tag_for_data_logging = yes }
				add_to_variable = { THIS.KR_data_logging_months = 1 }
			}

			#Disable WT decreases for starting pro-German tags
			every_country = {
				limit = {
					OR = {
						is_ally_with = GER
						is_ally_with = ENT
						original_tag = AUS
						is_subject_of = AUS
					}
				}
				set_country_flag = world_tension_joined_conservative_faction
			}
			every_country = {
				limit = {
					OR = {
						is_ally_with = INT
						is_ally_with = JAP
						is_ally_with = RUS
					}
				}
				set_country_flag = world_tension_joined_radical_faction
			}

			#double-check economic sphere market access
			random_country = { country_event = ai_events.90 }

			set_global_flag = on_startup_completed
		}
	}

	#FROM is war target
	on_declare_war = {
		effect = {
			log = "on_declare_war [GetLogRoot] [GetLogFrom]"
			FROM = { set_country_flag = had_war }
			ROOT = { set_country_flag = had_war }
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			log = "on_state_control_changed [GetLogRoot] [GetLogFrom] [GetLogFromFrom]"
			FROM.FROM = { rename_state_effect = yes }

			### Operative Nationality Check
			if = {
				limit = {
					is_operative_copy_country = yes
					NOT = { has_country_flag = KR_operative_nationality_check }
				}
				set_country_flag = KR_operative_nationality_check
				country_event = generic_events.209
			}

			### Integration Check
			FROM.FROM = {
				if = {
					limit = {
						has_variable = can_integrate_@ROOT
						NOT = { is_core_of = ROOT }
						impassable = no
					}
					start_state_integration_resistance = yes
				}
				else = {
					clear_state_integration_resistance = yes
				}
			}

			### Dynamic Tag Boot Check
			if = {
				limit = {
					is_dynamic_country = yes
					NOT = { has_country_flag = dynamic_tag_setup_done }
				}
				set_country_flag = dynamic_tag_setup_done
				default_party_popularity_PP_gain = yes
				create_coalitions_array_if_missing = yes

				if = {
					limit = {
						is_in_array = { global.american_tags_array = original_tag }
						NOT = { is_in_array = { global.american_tags_array = THIS } }
					}
					add_to_array = { global.american_tags_array = THIS }
				}
				if = {
					limit = {
						is_in_array = { global.south_american_tags_array = original_tag }
						NOT = { is_in_array = { global.south_american_tags_array = THIS } }
					}
					add_to_array = { global.south_american_tags_array = THIS }
				}
				if = {
					limit = {
						is_in_array = { global.central_american_tags_array = original_tag }
						NOT = { is_in_array = { global.central_american_tags_array = THIS } }
					}
					add_to_array = { global.central_american_tags_array = THIS }
				}
				if = {
					limit = {
						is_in_array = { global.caribbean_tags_array = original_tag }
						NOT = { is_in_array = { global.caribbean_tags_array = THIS } }
					}
					add_to_array = { global.caribbean_tags_array = THIS }
				}
				if = {
					limit = {
						is_in_array = { global.north_american_tags_array = original_tag }
						NOT = { is_in_array = { global.north_american_tags_array = THIS } }
					}
					add_to_array = { global.north_american_tags_array = THIS }
				}
				if = {
					limit = {
						is_in_array = { global.european_tags_array = original_tag }
						NOT = { is_in_array = { global.european_tags_array = THIS } }
					}
					add_to_array = { global.european_tags_array = THIS }
				}
				if = {
					limit = {
						is_in_array = { global.asian_tags_array = original_tag }
						NOT = { is_in_array = { global.asian_tags_array = THIS } }
					}
					add_to_array = { global.asian_tags_array = THIS }
				}
				if = {
					limit = {
						is_in_array = { global.indian_tags_array = original_tag }
						NOT = { is_in_array = { global.indian_tags_array = THIS } }
					}
					add_to_array = { global.indian_tags_array = THIS }
				}
				if = {
					limit = {
						is_in_array = { global.oceania_tags_array = original_tag }
						NOT = { is_in_array = { global.oceania_tags_array = THIS } }
					}
					add_to_array = { global.oceania_tags_array = THIS }
				}
				if = {
					limit = {
						is_in_array = { global.north_african_tags_array = original_tag }
						NOT = { is_in_array = { global.north_african_tags_array = THIS } }
					}
					add_to_array = { global.north_african_tags_array = THIS }
				}
				if = {
					limit = {
						is_in_array = { global.african_tags_array = original_tag }
						NOT = { is_in_array = { global.african_tags_array = THIS } }
					}
					add_to_array = { global.african_tags_array = THIS }
				}
				if = {
					limit = {
						is_in_array = { global.middle_eastern_tags_array = original_tag }
						NOT = { is_in_array = { global.middle_eastern_tags_array = THIS } }
					}
					add_to_array = { global.middle_eastern_tags_array = THIS }
				}

				if = {
					limit = { var:original_tag = { has_country_flag = is_in_americas } }
					set_country_flag = is_in_americas
				}
				if = {
					limit = { var:original_tag = { has_country_flag = is_in_south_america } }
					set_country_flag = is_in_south_america
				}
				if = {
					limit = { var:original_tag = { has_country_flag = is_in_central_america } }
					set_country_flag = is_in_central_america
				}
				if = {
					limit = { var:original_tag = { has_country_flag = is_in_caribbean } }
					set_country_flag = is_in_caribbean
				}
				if = {
					limit = { var:original_tag = { has_country_flag = is_in_north_america } }
					set_country_flag = is_in_north_america
				}
				if = {
					limit = { var:original_tag = { has_country_flag = is_in_europe } }
					set_country_flag = is_in_europe
				}
				if = {
					limit = { var:original_tag = { has_country_flag = is_in_india } }
					set_country_flag = is_in_india
				}
				if = {
					limit = { var:original_tag = { has_country_flag = is_in_asia } }
					set_country_flag = is_in_asia
				}
				if = {
					limit = { var:original_tag = { has_country_flag = is_in_oceania } }
					set_country_flag = is_in_oceania
				}
				if = {
					limit = { var:original_tag = { has_country_flag = is_in_north_africa } }
					set_country_flag = is_in_north_africa
				}
				if = {
					limit = { var:original_tag = { has_country_flag = is_in_africa } }
					set_country_flag = is_in_africa
				}
				if = {
					limit = { var:original_tag = { has_country_flag = is_in_middle_east } }
					set_country_flag = is_in_middle_east
				}
			}

			#Important countries for logalyzer
			if = {
				limit = {
					ROOT = { tag = CAN }
					FROM = { tag = ENG }
				}
				log = "KR_Event_Logging;CANADA LANDS IN BRITAIN"
			}
			else_if = {
				limit = {
					ROOT = { tag = NFA }
					FROM = { tag = FRA }
				}
				log = "KR_Event_Logging;FRANCE LANDS IN FRANCE"
			}
		}
	}
	#ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
	on_annex = {
		effect = {
			log = "on_annex [GetLogRoot] [GetLogFrom]"
			FROM = {
				leave_economic_sphere = yes
				clr_country_flag = KR_can_raise_autonomy_level
				clr_country_flag = KR_can_become_free
				clr_country_flag = KR_operative_nationality_check
				clr_country_flag = GER_capitulated
				clear_array = guarantor_array

				# reset dynamic tags
				if = {
					limit = {
						is_dynamic_country = yes
						NOT = { has_country_flag = reserved_dynamic_tag }
					}
					drop_cosmetic_tag = yes
					clear_government_flags = yes
					every_state = { remove_claim_by = PREV }

					clr_country_flag = dynamic_tag_setup_done

					clr_country_flag = is_in_north_america
					clr_country_flag = is_in_central_america
					clr_country_flag = is_in_caribbean
					clr_country_flag = is_in_south_america
					clr_country_flag = is_in_americas
					clr_country_flag = is_in_europe
					clr_country_flag = is_in_india
					clr_country_flag = is_in_asia
					clr_country_flag = is_in_oceania
					clr_country_flag = is_in_north_africa
					clr_country_flag = is_in_africa
					clr_country_flag = is_in_middle_east

					if = {
						limit = { is_in_array = { global.south_american_tags_array = THIS } }
						remove_from_array = { global.south_american_tags_array = THIS }
					}
					if = {
						limit = { is_in_array = { global.central_american_tags_array = THIS } }
						remove_from_array = { global.central_american_tags_array = THIS }
					}
					if = {
						limit = { is_in_array = { global.caribbean_tags_array = THIS } }
						remove_from_array = { global.caribbean_tags_array = THIS }
					}
					if = {
						limit = { is_in_array = { global.north_american_tags_array = THIS } }
						remove_from_array = { global.north_american_tags_array = THIS }
					}
					if = {
						limit = { is_in_array = { global.american_tags_array = THIS } }
						remove_from_array = { global.american_tags_array = THIS }
					}
					if = {
						limit = { is_in_array = { global.european_tags_array = THIS } }
						remove_from_array = { global.european_tags_array = THIS }
					}
					if = {
						limit = { is_in_array = { global.asian_tags_array = THIS } }
						remove_from_array = { global.asian_tags_array = THIS }
					}
					if = {
						limit = { is_in_array = { global.indian_tags_array = THIS } }
						remove_from_array = { global.indian_tags_array = THIS }
					}
					if = {
						limit = { is_in_array = { global.oceania_tags_array = THIS } }
						remove_from_array = { global.oceania_tags_array = THIS }
					}
					if = {
						limit = { is_in_array = { global.north_african_tags_array = THIS } }
						remove_from_array = { global.north_african_tags_array = THIS }
					}
					if = {
						limit = { is_in_array = { global.african_tags_array = THIS } }
						remove_from_array = { global.african_tags_array = THIS }
					}
					if = {
						limit = { is_in_array = { global.middle_eastern_tags_array = THIS } }
						remove_from_array = { global.middle_eastern_tags_array = THIS }
					}

					clr_country_flag = had_war
					clr_country_flag = KR_operative_nationality_check
					clr_country_flag = has_demobilization_check
					clr_country_flag = has_reduce_units_check
					clr_country_flag = open_annexation_event
					clr_country_flag = world_tension_joined_conservative_faction
					clr_country_flag = world_tension_joined_radical_faction
				}
				# clear tag cores and claims if set to
				else_if = {
					limit = { remove_cores_of_tag_if_non_existent = yes }
					clear_cores_of_tag_if_possible = yes
				}
				every_state = {
					limit = { has_contested_owner = PREV }
					remove_contested_owner = PREV
				}

				# clear notifications
				if = {
					limit = { is_in_array = { global.faction_joining_alerts = THIS } }
					clear_faction_joining_alert = yes
				}
				for_each_loop = {
					array = state_integration_alerts
					clear_variable = integration_alert_timer_@var:v
					clear_variable = integration_progressbar_value_@var:v
				}
				for_each_loop = {
					array = country_integration_alerts
					clear_variable = integration_alert_timer_@var:v
					clear_variable = integration_progressbar_value_@var:v
				}
				clear_array = state_integration_alerts
				clear_array = country_integration_alerts

				every_possible_country = {
					limit = { NOT = { tag = PREV } }

					#clear embargo flags
					clear_embargo_PREV = yes

					#clear volunteers
					clear_volunteers_to_PREV = yes
					PREV = { clear_volunteers_to_PREV = yes }
				}
			}

			recheck_annexations = yes

			#emergency countermeasure if GER is somehow annexed before WK2 starts
			if = {
				limit = {
					FROM = { tag = GER }
					NOT = { has_global_flag = second_weltkrieg_has_started }
				}
				country_event = ai_events.200
				set_global_flag = second_weltkrieg_has_ended
			}
		}
	}

	# called a country fully decrypts cipher of a target country
	# scope is the target country that its cipher is decrypted
	# from scope is the decrypter country
	on_fully_decrypted_cipher = {
		effect = {
			log = "on_fully_decrypted_cipher [GetLogRoot] [GetLogFrom]"
		}
	}

	# called when a country activates its active cipher bonuses against a target
	# scope is the target country
	# from scope is the country that activates its bonuses
	on_activated_active_decryption_bonuses = {
		effect = {
			log = "on_activated_active_decryption_bonuses [GetLogRoot] [GetLogFrom]"
		}
	}

	#ROOT is subject FROM is previous overlord
	on_subject_free = {
		effect = {
			log = "on_subject_free [GetLogRoot] [GetLogFrom]"
			clr_country_flag = KR_can_raise_autonomy_level
			clr_country_flag = KR_can_become_free
			clr_country_flag = KR_independence_refused
		}
	}

	#ROOT is subject FROM is overlord
	on_subject_autonomy_level_change = {
		effect = {
			log = "on_subject_autonomy_level_change [GetLogRoot] [GetLogFrom]"
			clr_country_flag = KR_can_raise_autonomy_level
		}
	}

	#ROOT is subject FROM is overlord
	on_subject_annexed = {
		effect = {
			log = "on_subject_annexed [GetLogRoot] [GetLogFrom]"
			clr_country_flag = KR_can_raise_autonomy_level
			clr_country_flag = KR_can_become_free
			clr_country_flag = KR_independence_war_overlord
			clr_country_flag = KR_independence_war
			clr_country_flag = KR_independence_refused
		}
	}

	on_government_change = {
		effect = {
			log = "on_government_change [GetLogRoot]"
			mark_focus_tree_layout_dirty = yes

			# Renaming
			if = {
				limit = { exists = yes }
				every_controlled_state = { rename_state_effect = yes }
			}
		}
	}

	on_ruling_party_change = {
		# temp var old_ideology_token is available for effects
		effect = {
			log = "on_ruling_party_change [GetLogRoot] old_ideology_token: [?old_ideology_token.GetTokenKey]"

			# Economic Spheres
			if = {
				limit = {
					is_in_economic_sphere = yes
					is_subject = yes
					overlord = { is_in_same_economic_sphere_as_PREV = no }
				}
				if = {
					limit = {
						OR = {
							overlord = { is_in_economic_sphere = no }
							overlord = { GER_is_in_mitteleuropa = yes } #has special invite rules
						}
					}
					leave_economic_sphere = yes
				}
				else_if = {
					limit = { overlord = { GER_is_in_mitteleuropa = no } } #has its own invite logic
					set_temp_variable = { sphere_target = THIS }
					overlord = { add_to_economic_sphere = yes }
				}
			}

			# Volunteers
			if = {
				limit = { exists = yes }
				if = {
					limit = {
						has_socialist_government = yes
						previous_government_was_socialist = no
					}
					every_other_country = {
						if = {
							limit = { has_socialist_government = no }
							recall_volunteers_from = PREV
							clear_volunteers_to_PREV = yes
						}
					}
				}
				else_if = {
					limit = {
						has_socialist_government = no
						previous_government_was_socialist = yes
					}
					every_other_country = {
						if = {
							limit = { has_socialist_government = yes }
							recall_volunteers_from = PREV
							clear_volunteers_to_PREV = yes
						}
					}
				}
				every_other_country = {
					if = {
						limit = { willing_to_send_volunteers_to_PREV = yes }
						PREV = { save_event_target_as = volunteer_target }
						send_volunteers_to_PREV = yes
					}
					else = {
						clear_volunteers_to_PREV = yes
					}
					ROOT = {
						if = {
							limit = { willing_to_send_volunteers_to_PREV = yes }
							send_volunteers_to_PREV = yes
						}
						else = {
							clear_volunteers_to_PREV = yes
						}
					}
				}
			}

			# Generic 2ICs
			if = {
				limit = {
					has_character = empowered_legislative
					has_character = empowered_executive
					has_character = empowered_trade_unions
					OR = {
						empowered_legislative = { is_hired_as_advisor = yes }
						empowered_executive = { is_hired_as_advisor = yes }
						empowered_trade_unions = { is_hired_as_advisor = yes }
					}
				}
				if = {
					limit = { has_socialist_government = yes }
					activate_advisor = empowered_trade_unions_sic
				}
				else_if = {
					limit = { has_authoritarian_government = yes }
					activate_advisor = empowered_executive_sic
				}
				else = {
					activate_advisor = empowered_legislative_sic
				}
			}

			# Opinion Modifiers
			every_possible_country = {
				limit = { NOT = { tag = ROOT } }
				remove_opinion_modifier = {
					target = ROOT
					modifier = KR_similar_ideology_close
				}
				remove_opinion_modifier = {
					target = ROOT
					modifier = KR_similar_ideology
				}
				remove_opinion_modifier = {
					target = ROOT
					modifier = KR_similar_ideology_distant
				}
				remove_opinion_modifier = {
					target = ROOT
					modifier = KR_different_ideology_close
				}
				remove_opinion_modifier = {
					target = ROOT
					modifier = KR_different_ideology
				}
				remove_opinion_modifier = {
					target = ROOT
					modifier = KR_same_ideology
				}
				ROOT = {
					remove_opinion_modifier = {
						target = PREV
						modifier = KR_similar_ideology_close
					}
					remove_opinion_modifier = {
						target = PREV
						modifier = KR_similar_ideology
					}
					remove_opinion_modifier = {
						target = PREV
						modifier = KR_similar_ideology_distant
					}
					remove_opinion_modifier = {
						target = PREV
						modifier = KR_different_ideology_close
					}
					remove_opinion_modifier = {
						target = PREV
						modifier = KR_different_ideology
					}
					remove_opinion_modifier = {
						target = PREV
						modifier = KR_same_ideology
					}
				}
				if = {
					limit = { has_government = ROOT }
					add_opinion_modifier = {
						target = ROOT
						modifier = KR_same_ideology
					}
					reverse_add_opinion_modifier = {
						target = ROOT
						modifier = KR_same_ideology
					}
				}
				else_if = {
					limit = {
						OR = {
							AND = {
								OR = {
									has_government = social_conservative
									has_government = authoritarian_democrat
								}
								ROOT = {
									OR = {
										has_government = social_conservative
										has_government = authoritarian_democrat
									}
								}
							}
							AND = {
								OR = {
									has_government = social_democrat
									has_government = social_liberal
								}
								ROOT = {
									OR = {
										has_government = social_democrat
										has_government = social_liberal
									}
								}
							}
						}
					}
					add_opinion_modifier = {
						target = ROOT
						modifier = KR_similar_ideology_close
					}
					reverse_add_opinion_modifier = {
						target = ROOT
						modifier = KR_similar_ideology_close
					}
				}
				else_if = {
					limit = {
						OR = {
							AND = {
								has_government = social_democrat
								ROOT = {
									OR = {
										has_government = market_liberal
										has_government = social_conservative
										has_government = authoritarian_democrat
									}
								}
							}
							AND = {
								OR = {
									has_government = market_liberal
									has_government = social_conservative
									has_government = authoritarian_democrat
								}
								ROOT = { has_government = social_democrat }
							}
							AND = {
								has_government = totalist
								ROOT = { has_government = radical_socialist }
							}
							AND = {
								has_government = radical_socialist
								ROOT = { has_government = totalist }
							}
						}
					}
					add_opinion_modifier = {
						target = ROOT
						modifier = KR_similar_ideology_distant
					}
					reverse_add_opinion_modifier = {
						target = ROOT
						modifier = KR_similar_ideology_distant
					}
				}
				else_if = {
					limit = {
						OR = {
							AND = {
								has_socialist_government = yes
								ROOT = { has_socialist_government = yes }
							}
							AND = {
								has_democratic_government = yes
								ROOT = { has_democratic_government = yes }
							}
							AND = {
								has_dictatorship_government = yes
								ROOT = { has_dictatorship_government = yes }
							}
							AND = {
								OR = {
									has_government = authoritarian_democrat
									has_government = paternal_autocrat
								}
								ROOT = {
									OR = {
										has_government = authoritarian_democrat
										has_government = paternal_autocrat
									}
								}
							}
						}
					}
					add_opinion_modifier = {
						target = ROOT
						modifier = KR_similar_ideology
					}
					reverse_add_opinion_modifier = {
						target = ROOT
						modifier = KR_similar_ideology
					}
				}
				else_if = {
					limit = {
						OR = {
							AND = {
								has_government = social_democrat
								ROOT = { has_government = radical_socialist }
							}
							AND = {
								has_government = radical_socialist
								ROOT = { has_government = social_democrat }
							}
							AND = {
								has_government = paternal_autocrat
								ROOT = { has_government = social_conservative }
							}
							AND = {
								has_government = social_conservative
								ROOT = { has_government = paternal_autocrat }
							}
							AND = {
								has_government = national_populist
								ROOT = {
									OR = {
										has_government = social_conservative
										has_government = authoritarian_democrat
									}
								}
							}
							AND = {
								OR = {
									has_government = social_conservative
									has_government = authoritarian_democrat
								}
								ROOT = { has_government = national_populist }
							}
						}
					}
					add_opinion_modifier = {
						target = ROOT
						modifier = KR_different_ideology_close
					}
					reverse_add_opinion_modifier = {
						target = ROOT
						modifier = KR_different_ideology_close
					}
				}
				else = {
					add_opinion_modifier = {
						target = ROOT
						modifier = KR_different_ideology
					}
					reverse_add_opinion_modifier = {
						target = ROOT
						modifier = KR_different_ideology
					}
				}
			}

			#remove monarchy cosmetic tags if socialist
			if = {
				limit = {
					has_socialist_government = yes
					OR = {
						meta_trigger = {
							text = { has_cosmetic_tag = [MONARCHY_TAG] }
							MONARCHY_TAG = "[ROOT.GetTag]_monarchy"
						}
						meta_trigger = {
							text = { has_cosmetic_tag = [KINGDOM_TAG] }
							KINGDOM_TAG = "[ROOT.GetTag]_kingdom"
						}

						#exceptions
						has_cosmetic_tag = CAN_entente
						has_cosmetic_tag = IRE_monarchist
						has_cosmetic_tag = IRE_monarchist_gael
						has_cosmetic_tag = POL_AUS_kingdom
						has_cosmetic_tag = BLR_KRY
					}
				}
				drop_cosmetic_tag = yes
			}

			#remove invalid officer corps ideas
			if = {
				limit = { has_dlc_nsb = yes }
				### army academy ###
				if = {
					limit = {
						has_idea = best_of_the_best_spirit
						has_elected_government = no
					}
					remove_ideas = best_of_the_best_spirit
				}
				else_if = {
					limit = {
						has_idea = academy_scholarships_spirit
						NOT = { has_government = syndicalist }
						NOT = { has_government = radical_socialist }
					}
					remove_ideas = academy_scholarships_spirit
				}
				else_if = {
					limit = {
						has_idea = political_loyalty_spirit
						has_any_authoritarian_government = no
					}
					remove_ideas = political_loyalty_spirit
				}
				else_if = {
					limit = {
						has_idea = KR_whampoa_academy_spirit
						china_alignment_left_kuomintang = no
						china_alignment_right_kuomintang = no
					}
					remove_ideas = KR_whampoa_academy_spirit
				}

				### army spirit ###
				if = {
					limit = {
						has_idea = relief_of_command_spirit
						NOT = { has_government = syndicalist }
						NOT = { has_government = radical_socialist }
						has_elected_government = no
					}
					remove_ideas = relief_of_command_spirit
				}
				else_if = {
					limit = {
						has_idea = ideological_loyalty_spirit_KR
						has_socialist_government = no
						NOT = { has_government = national_populist }
					}
					remove_ideas = ideological_loyalty_spirit_KR
				}
				else_if = {
					limit = {
						has_idea = state_serves_the_military_spirit
						has_any_authoritarian_government = no
					}
					remove_ideas = state_serves_the_military_spirit
				}

				### air force command ###
				if = {
					limit = {
						has_idea = steel_wings_steel_hearts_spirit
						has_socialist_government = no
					}
					remove_ideas = steel_wings_steel_hearts_spirit
				}
			}

			# remove countries from invalid factions
			if = {
				limit = {
					is_in_faction_but_not_leader = yes
					NOT = { has_country_flag = ARM_PER_alliance } #non-ideological faction
					NOT = { has_country_flag = ARM_PER_tabriz_accords_unsolidified } #non-ideological faction
					faction_leader = {
						both_socialist_or_both_not_socialist = no
						NOT = {
							tag = BPL #non-ideological faction
							tag = CUF #non-ideological faction
							tag = HOL #has scripted event for this scenario
							tag = BEL #has scripted event for this scenario
							AND = {
								tag = CHI #non-ideological faction
								NOT = { tag = INT }
							}
							AND = {
								tag = SPR #non-ideological faction
								has_global_flag = spanish_civil_war
							}
						}
					}
				}
				if = {
					limit = { is_subject = yes }
					overlord = {
						set_autonomy = {
							target = PREV
							autonomy_state = autonomy_free
						}
					}
				}
				leave_faction = yes
				peace_out_non_neighbours_after_leaving_faction = yes
			}
		}
	}

	on_ruling_party_change_immediate = {
		# temp var old_ideology_token is available for effects
		effect = {
			log = "on_ruling_party_change_immediate [GetLogRoot] old_ideology_token: [?old_ideology_token.GetTokenKey]"
			mark_focus_tree_layout_dirty = yes

			#Government Flags
			set_government_flags = yes

			# Coalitions
			if = {
				limit = { NOT = { has_government = var:old_ideology_token } }
				end_coalition = yes
			}
		}
	}

	#ROOT is winner, FROM is loser (called for all winners against all losers)
	on_before_peace_conference_start = {
		effect = {
			log = "on_before_peace_conference_start [GetLogRoot] [GetLogFrom]"
			event_target:system = { set_cosmetic_tag = on_annex_workaround }
			FROM = {
				every_owned_state = {
					limit = { impassable = yes }
					set_state_owner_to = event_target:system
				}
			}
		}
	}

	#ROOT is winner, FROM is loser (called for all winners against all losers)
	on_peaceconference_started = {
		effect = {
			log = "on_peaceconference_started [GetLogRoot] [GetLogFrom]"

			#set up PC country arrays
			if = {
				limit = { NOT = { is_in_array = { global.pc_winners_array = ROOT } } }
				add_to_array = { global.pc_winners_array = ROOT }
				if = {
					limit = { is_major = yes }
					set_global_flag = pc_has_major_winner
				}
				if = {
					limit = { is_subject = no }
					set_global_flag = pc_has_non_subject_winner
				}
				FROM = {
					if = {
						limit = { NOT = { is_in_array = { global.pc_losers_array = THIS } } }
						add_to_array = { global.pc_losers_array = THIS }
						every_owned_state = { add_to_array = { PREV.pc_owned_states = THIS } }
					}
				}
			}

			#emergency countermeasure if GER is somehow annexed before WK2 starts
			if = {
				limit = {
					FROM = { tag = GER }
					NOT = { has_global_flag = second_weltkrieg_has_started }
				}
				country_event = ai_events.200
				set_global_flag = second_weltkrieg_has_ended
			}
		}
	}

	#ROOT is winner #FROM is loser
	on_peaceconference_ended = {
		effect = {
			log = "on_peaceconference_ended [GetLogRoot] [GetLogFrom]"

			#Remove redundant wargoals
			if = {
				limit = { has_wargoal_against = FROM }
				remove_wargoal = { target = FROM type = all }
			}
			FROM = {
				if = {
					limit = { has_wargoal_against = ROOT }
					remove_wargoal = { target = ROOT type = all }
				}
			}

			# Boot events
			country_event = ai_events.211 #end of WK2

			# Important countries for logalyzer
			FROM = {
				if = {
					limit = { exists = no }
					if = {
						limit = {
							NOT = { has_global_flag = second_weltkrieg_has_ended }
						}
						if = {
							limit = { tag = GER }
							log = "KR_Event_Logging;GER FALLS"
						}
						else_if = {
							limit = { tag = FRA }
							log = "KR_Event_Logging;FRA FALLS"
						}
						else_if = {
							limit = { tag = ENG }
							log = "KR_Event_Logging;ENG FALLS"
						}
						else_if = {
							limit = { tag = RUS }
							log = "KR_Event_Logging;RUS FALLS"
						}
						else_if = {
							limit = { tag = AUS }
							log = "KR_Event_Logging;AUS FALLS"
						}
					}
					### Those are fired for every winner, thus they can't be used
					# else_if = {
					# 	limit = { tag = CAN }
					# 	log = "KR_Event_Logging;CAN FALLS - BY [ROOT.GetTag]"
					# }
					# else_if = {
					# 	limit = { tag = NFA }
					# 	log = "KR_Event_Logging;NFA FALLS - BY [ROOT.GetTag]"
					# }
					else_if = {
						limit = {
							tag = BRA
							ROOT = {
								OR = {
									tag = ARG
									tag = FOP
								}
							}
						}
						log = "KR_Event_Logging;Argentina WINS ARG-BRA WAR"
					}
					else_if = {
						limit = {
							OR = {
								tag = ARG
								tag = FOP
							}
							ROOT = { tag = BRA }
						}
						log = "KR_Event_Logging;Brazil WINS ARG-BRA WAR"
					}
				}
			}

			# transfer impassables to the correct targets
			for_each_scope_loop = {
				array = global.impassable_states
				if = {
					limit = { has_variable = paired_impassable }
					transfer_state_to = paired_impassable:owner
				}
				else_if = {
					limit = { is_owned_by = event_target:system }
					random_neighbor_state = {
						limit = {
							impassable = no
							is_in_array = { global.pc_winners_array = owner }
						}
						PREV = { transfer_state_to = PREV.owner }
					}
				}
			}
			event_target:system = { drop_cosmetic_tag = yes }

			# clear PC data
			clr_global_flag = pc_has_major_winner
			clr_global_flag = pc_has_non_subject_winner
			clear_array = global.pc_winners_array
			clear_array = global.pc_losers_array

			# remove the force-surrender idea, just in case it's still there
			FROM = { remove_ideas = ready_to_surrender }

			### give temporary military access after scripted peaces
			if = {
				limit = {
					country_exists = ROOT
					country_exists = FROM
					NOT = { is_neighbor_of = FROM }
					NOT = { is_ally_with = FROM } #just in case
					NOT = { FROM = { any_neighbor_country = { is_ally_with = ROOT } } }
				}
				if = {
					limit = { any_owned_state = { FROM = { divisions_in_state = { state = PREV size > 0 } } } }
					give_military_access = FROM
				}
				FROM = {
					if = {
						limit = { any_owned_state = { ROOT = { divisions_in_state = { state = PREV size > 0 } } } }
						give_military_access = ROOT
					}
				}
			}

			### civil war tags should always annex each other
			if = {
				limit = {
					FROM = {
						exists = yes #so that we don't keep checking this for every winner-loser pair
						has_capitulated = yes
					}
					OR = {
						#Union of Britain
						AND = {
							tag = ENT
							FROM = { original_tag = ENG }
						}
						#Germany
						AND = {
							OR = {
								original_tag = GER
								original_tag = GRU
							}
							FROM = {
								OR = {
									original_tag = GER
									original_tag = GRU
								}
							}
						}
						#United States
						AND = {
							is_american_tag = yes
							FROM = { is_american_tag = yes }
						}
					}
				}
				annex_country = { target = FROM transfer_troops = yes }
			}
		}
	}

	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			log = "on_capitulation [GetLogRoot] [GetLogFrom]"
			news_event = country_capitulated.0

			# transfer the navy if set to
			if = {
				limit = { has_variable = transfer_navy_to }
				if = {
					limit = {
						country_exists = var:transfer_navy_to
						FROM = { is_ally_with = var:transfer_navy_to }
					}
					var:transfer_navy_to = {
						ROOT = { transfer_navy = { target = PREV } }
					}
				}
				clear_variable = transfer_navy_to
			}
		}
	}

	# ROOT is capitulated country, FROM is winner
	on_capitulation_immediate = {
		effect = {
			log = "on_capitulation_immediate [GetLogRoot] [GetLogFrom]"

			# Important countries for logalyzer
			if = {
				limit = {
					NOT = { has_global_flag = second_weltkrieg_has_ended }
				}
				if = {
					limit = { tag = GER }
					log = "KR_Event_Logging;GER FALLS"
				}
				else_if = {
					limit = { tag = FRA }
					log = "KR_Event_Logging;FRA FALLS"
				}
				else_if = {
					limit = { tag = ENG }
					log = "KR_Event_Logging;ENG FALLS"
				}
				else_if = {
					limit = { tag = RUS }
					log = "KR_Event_Logging;RUS FALLS"
				}
				else_if = {
					limit = { tag = AUS }
					log = "KR_Event_Logging;AUS FALLS"
				}
			}
			else_if = {
				limit = { tag = CAN }
				log = "KR_Event_Logging;CAN FALLS - BY [FROM.GetTag]"
			}
			else_if = {
				limit = { tag = NFA }
				log = "KR_Event_Logging;NFA FALLS - BY [FROM.GetTag]"
			}

			if = {
				limit = {
					tag = BRA
					FROM = {
						OR = {
							tag = ARG
							tag = FOP
						}
					}
				}
				log = "KR_Event_Logging;Argentina WINS ARG-BRA WAR"
			}
			else_if = {
				limit = {
					OR = {
						tag = ARG
						tag = FOP
					}
					FROM = { tag = BRA }
				}
				log = "KR_Event_Logging;Brazil WINS ARG-BRA WAR"
			}
		}
	}

	# ROOT is previously capitulated country
	on_uncapitulation = {
		effect = {
			log = "on_uncapitulation [GetLogRoot]"
			if = {
				limit = {
					has_country_flag = was_faction_leader
					is_subject = no
					is_in_faction = yes
				}
				set_faction_leader = yes
			}
		}
	}

	# FROM = faction leader
	on_leave_faction = {
		effect = {
			log = "on_leave_faction [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country receiving guarantee, ROOT = country giving guarantee
	on_guarantee = {
		effect = {
			log = "on_guarantee [GetLogRoot] [GetLogFrom]"
			if = {
				limit = { NOT = { is_in_array = { FROM.guarantor_array = ROOT } } }
				add_to_array = { FROM.guarantor_array = ROOT }
			}
		}
	}

	# FROM = country giving access, ROOT = country asking for access
	on_military_access = {
		effect = {
			log = "on_military_access [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country receiving access, ROOT = country offering access
	on_offer_military_access = {
		effect = {
			log = "on_offer_military_access [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country being called, ROOT = country calling
	on_call_allies = {
		effect = {
			log = "on_call_allies [GetLogRoot] [GetLogFrom]"

			#Important countries for logalyzer
			if = {
				limit = {
					ROOT = { tag = EGY }
					FROM = { tag = LBA }
				}
				log = "KR_Event_Logging;Cyrenaica REVOLTS AGAINST OTT"
			}
		}
	}

	# FROM = country being joined, ROOT = country joining
	on_join_allies = {
		effect = {
			log = "on_join_allies [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country receiving goods, ROOT = country sending goods
	on_lend_lease = {
		effect = {
			log = "on_lend_lease [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country requesting goods, ROOT = country sending goods
	on_incoming_lend_lease = {
		effect = {
			log = "on_incoming_lend_lease [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country receiving volunteers, ROOT = country sending volunteers
	on_send_volunteers = {
		effect = {
			log = "on_send_volunteers [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country losing volunteers, ROOT = country recalling volunteers
	on_recall_volunteers = {
		effect = {
			log = "on_recall_volunteers [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country to which they're sent, ROOT = sending country
	on_send_expeditionary_force = {
		effect = {
			log = "on_send_expeditionary_force [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country from which the forces are returning, ROOT = country who sent them
	on_return_expeditionary_forces = {
		effect = {
			log = "on_return_expeditionary_forces [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country requesting them, ROOT = requesting country
	on_request_expeditionary_forces = {
		effect = {
			log = "on_request_expeditionary_forces [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country on whom the wargoal is being generated, ROOT = country generating wargoal
	on_generate_wargoal = {
		effect = {
			log = "on_generate_wargoal [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country giving control of the state, ROOT = country asking for control of the state
	on_ask_for_state_control = {
		effect = {
			log = "on_ask_for_state_control [GetLogThis] [GetLogRoot] [GetLogFrom]"
		}
	}

	# FROM = country accepting control of the state, ROOT = country giving control of the state
	on_give_state_control = {
		effect = {
			log = "on_give_state_control [GetLogThis] [GetLogRoot] [GetLogFrom]"
		}
	}

	on_new_term_election = {
		effect = {
			log = "on_new_term_election [GetLogRoot]"
		}
	}

	#FROM is state #ROOT is broken as hell
	on_nuke_drop = {
		effect = {
			log = "on_nuke_drop [GetLogRoot] [GetLogFrom]"

			news_event = { id = nuke_dropped.2 days = 1 }
			news_event = { id = nuke_dropped.3 days = 1 }
			news_event = { id = nuke_dropped.4 days = 1 }
			news_event = { id = nuke_dropped.5 days = 1 }
			news_event = { id = nuke_dropped.6 days = 1 }
			news_event = { id = nuke_dropped.7 days = 1 }
			news_event = { id = nuke_dropped.8 days = 1 }
			news_event = { id = nuke_dropped.9 days = 1 }
			news_event = { id = nuke_dropped.10 days = 1 }
			news_event = { id = nuke_dropped.11 days = 1 }
			news_event = { id = nuke_dropped.12 days = 1 }
			news_event = { id = nuke_dropped.13 days = 1 }
			news_event = { id = nuke_dropped.14 days = 1 }
			news_event = { id = nuke_dropped.15 days = 1 }
		}
		random_events = {
			100 = nuke_dropped.0
		}
	}

	# Ace pilots
	# country, FROM = ace
	on_ace_promoted = {
		random_events = {
			100 = ace_promoted.1
			5 = ace_promoted.2
		}
	}

	# country, FROM = ace, PREV = enemy ace
	# This event fires twice, once for each ace.
	on_aces_killed_each_other = {
		random_events = {
			100 = aces_killed_each_other.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, has killed FROM
	on_ace_killed_by_ace = {
		random_events = {
			100 = ace_killed_by_ace.1
		}
	}

	# country, FROM = our ace,
	# PREV = enemy ace, killed by FROM
	on_ace_killed_other_ace = {
		random_events = {
			100 = ace_killed_other_ace.1
		}
	}

	# country, FROM = ace
	on_ace_killed = {
		random_events = {
			100 = ace_died.1
		}
	}

	#used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord
	on_puppet = {
		effect = {
			log = "on_puppet [GetLogRoot] [GetLogFrom]"
			ROOT = {
				clr_country_flag = KR_independence_war_overlord
				clr_country_flag = KR_independence_war
				clr_country_flag = KR_independence_refused
			}
		}
	}

	#used when forcing government change in a peace conference
	#ROOT = nation having the government changed, FROM = overlord
	on_force_government = {
		effect = {
			log = "on_force_government [GetLogRoot] [GetLogFrom]"
			set_country_flag = pc_forced_government
		}
	}

	#used when liberating in a peace conference
	#ROOT = nation being liberated, FROM = liberator
	on_liberate = {
		effect = {
			log = "on_liberate [GetLogRoot] [GetLogFrom]"
			if = {
				limit = { exists = no }
				if = {
					limit = { FROM = { has_government = totalist } }
					set_temp_variable = { liberated_government = token:totalist }
				}
				else_if = {
					limit = { FROM = { has_government = syndicalist } }
					random_list = {
						2 = { set_temp_variable = { liberated_government = token:syndicalist } }
						1 = { set_temp_variable = { liberated_government = token:radical_socialist } }
					}
					set_temp_variable = { liberated_elections = 1 }
				}
				else_if = {
					limit = { FROM = { has_government = radical_socialist } }
					random_list = {
						1 = { set_temp_variable = { liberated_government = token:syndicalist } }
						2 = { set_temp_variable = { liberated_government = token:radical_socialist } }
					}
					set_temp_variable = { liberated_elections = 1 }
				}
				else_if = {
					limit = { FROM = { has_government = social_democrat } }
					random_list = {
						3 = { set_temp_variable = { liberated_government = token:social_democrat } }
						2 = { set_temp_variable = { liberated_government = token:social_liberal } }
						1 = { set_temp_variable = { liberated_government = token:market_liberal } }
						1 = { set_temp_variable = { liberated_government = token:social_conservative } }
					}
					set_temp_variable = { liberated_elections = 1 }
				}
				else_if = {
					limit = { FROM = { has_government = social_liberal } }
					random_list = {
						2 = { set_temp_variable = { liberated_government = token:social_democrat } }
						3 = { set_temp_variable = { liberated_government = token:social_liberal } }
						2 = { set_temp_variable = { liberated_government = token:market_liberal } }
						1 = { set_temp_variable = { liberated_government = token:social_conservative } }
					}
					set_temp_variable = { liberated_elections = 1 }
				}
				else_if = {
					limit = { FROM = { has_government = market_liberal } }
					random_list = {
						1 = { set_temp_variable = { liberated_government = token:social_democrat } }
						2 = { set_temp_variable = { liberated_government = token:social_liberal } }
						3 = { set_temp_variable = { liberated_government = token:market_liberal } }
						2 = { set_temp_variable = { liberated_government = token:social_conservative } }
					}
					set_temp_variable = { liberated_elections = 1 }
				}
				else_if = {
					limit = { FROM = { has_government = social_conservative } }
					random_list = {
						1 = { set_temp_variable = { liberated_government = token:social_democrat } }
						1 = { set_temp_variable = { liberated_government = token:social_liberal } }
						2 = { set_temp_variable = { liberated_government = token:market_liberal } }
						3 = { set_temp_variable = { liberated_government = token:social_conservative } }
					}
					set_temp_variable = { liberated_elections = 1 }
				}
				else_if = {
					limit = { FROM = { has_government = authoritarian_democrat } }
					random_list = {
						1 = { set_temp_variable = { liberated_government = token:social_conservative } }
						3 = { set_temp_variable = { liberated_government = token:authoritarian_democrat } }
					}
				}
				else_if = {
					limit = { FROM = { has_government = paternal_autocrat } }
					random_list = {
						1 = { set_temp_variable = { liberated_government = token:authoritarian_democrat } }
						3 = { set_temp_variable = { liberated_government = token:paternal_autocrat } }
					}
				}
				else_if = {
					limit = { FROM = { has_government = national_populist } }
					set_temp_variable = { liberated_government = token:national_populist }
				}
				if = {
					limit = { has_variable = liberated_elections }
					set_politics = {
						ruling_party = var:liberated_government
						elections_allowed = yes
					}
				}
				else = {
					set_politics = {
						ruling_party = var:liberated_government
						elections_allowed = no
					}
				}
				set_political_party = {
					ideology = var:liberated_government
					popularity = 40
				}
			}
		}
	}

	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord
	on_release_as_puppet = {
		effect = {
			log = "on_release_as_puppet [GetLogRoot] [GetLogFrom]"
		}
	}

	#ROOT is free nation FROM is releaser
	on_release_as_free = {
		effect = {
			log = "on_release_as_free [GetLogRoot] [GetLogFrom]"
		}
	}

	#FROM is country getting invited.
	on_offer_join_faction = {
		effect = {
			log = "on_offer_join_faction [GetLogRoot] [GetLogFrom]"
			FROM = {
				#clear any embargoes
				every_other_country = {
					limit = { is_ally_with = PREV }
					clear_embargo_PREV = yes
				}

				if = {
					limit = { has_global_flag = TEMPORARY_DISABLED_FACTION_POPUP }
					clr_global_flag = TEMPORARY_DISABLED_FACTION_POPUP
				}
				else_if = {
					limit = { NOT = { is_in_array = { global.faction_joining_alerts = THIS } } }
					set_variable = { faction_joining_progressbar_value = -317 }
					set_variable = { faction_joining_alert_timer = 0 }
					add_to_array = { global.faction_joining_alerts = THIS }
					sound_effect = diplomatic_notification
					set_variable_to_random = global.kaiserreich_alerts_dirty
					country_event = { id = generic_events.25 hours = 1 }
				}
			}

			#WT from faction joining
			if = {
				limit = { NOT = { has_global_flag = second_weltkrieg_has_started } }
				if = {
					limit = {
						OR = {
							original_tag = GER
							original_tag = AUS
							tag = ENT
						}
						NOT = { FROM = { has_country_flag = world_tension_joined_conservative_faction } }
					}
					FROM = {
						set_country_flag = world_tension_joined_conservative_faction
						calculate_faction_joining_tension = yes
						multiply_temp_variable = { threat_value = -0.75 }
						add_named_threat = {
							threat = threat_value
							name = country_joins_alliance_threat
						}
					}
				}
				else_if = {
					limit = {
						OR = {
							tag = INT
							original_tag = JAP
							is_russian_tag = yes
						}
						NOT = { FROM = { has_country_flag = world_tension_joined_radical_faction } }
					}
					FROM = {
						set_country_flag = world_tension_joined_radical_faction
						calculate_faction_joining_tension = yes
						multiply_temp_variable = { threat_value = 1 }
						add_named_threat = {
							threat = threat_value
							name = country_joins_alliance_threat
						}
					}
				}
			}
		}
	}

	#FROM is faction leader on join faction requests. THIS DOES NOT FIRE ON ADD_TO_FACTION EFFECT! USE ON_OFFER_JOIN_FACTION!
	on_join_faction = {
		effect = {
			log = "on_join_faction [GetLogRoot] [GetLogFrom]"
		}
	}

	#FROM is the one that joins the faction
	on_create_faction = {
		effect = {
			log = "on_create_faction [GetLogRoot] [GetLogFrom]"
		}
	}

	# ROOT is the new faction leader FROM is the old faction leader
	on_assume_faction_leadership = {
		effect = {
			log = "on_assume_faction_leadership [GetLogRoot] [GetLogFrom]"
		}
	}

	# When a new faction is formed
	on_faction_formed = {
		effect = {
			log = "on_faction_formed [GetLogRoot] [GetLogFrom]"
		}
	}

	# From is owner country
	on_army_leader_daily = {
		effect = {
			if = {
				limit = {
					check_variable = { random < 0.02 }
					NOT = {
						has_trait = sick
						has_character_flag = recently_sick
					}
					set_temp_variable = { temp = sum_unit_terrain_modifier@sickness_chance }
					divide_temp_variable = { temp = num_units }
					check_variable = { temp > 0.75 }
				}
				set_character_flag = { flag = recently_sick value = 1 days = 180 }
				add_timed_unit_leader_trait = {
					trait = sick
					days = 30
				}
				unit_leader_event = unit_leader.1
			}
		}
	}

	# From is owner country
	on_army_leader_won_combat = {
		effect = {
			if = {
				limit = {
					NOT = {
						has_trait = wounded
						has_character_flag = recently_wounded
					}
					set_temp_variable = { chance = 0.001 }
					set_temp_variable = { factor = 1 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor }
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
				}
				set_character_flag = { flag = recently_wounded value = 1 days = 360 }
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = unit_leader.2
			}
		}
	}

	# From is owner country
	on_army_leader_lost_combat = {
		effect = {
			if = {
				limit = {
					NOT = {
						has_trait = wounded
						has_character_flag = recently_wounded
					}
					set_temp_variable = { chance = 0.005 }
					set_temp_variable = { factor = 1 }
					add_to_temp_variable = { factor = leader_modifier@wounded_chance_factor }
					multiply_temp_variable = { chance = factor }
					check_variable = { random < chance }
				}
				set_character_flag = { flag = recently_wounded value = 1 days = 360 }
				add_timed_unit_leader_trait = {
					trait = wounded
					days = 90
				}
				unit_leader_event = unit_leader.2
			}
		}
	}

	on_army_leader_promoted = {
		effect = {
			log = "on_army_leader_promoted [GetLogThis] [GetLogRoot] [GetLogFrom]"
			add_timed_unit_leader_trait = {
				trait = recently_promoted
				days = 100
			}
		}
	}

	#FROM - Country (owner)
	#ROOT - leader
	#FROMFROM - original owner for exiled leaders
	on_unit_leader_level_up = {
		effect = {
			if = {
				limit = {
					FROM = {
						has_idea = bold_attack_spirit
					}
				}
				character = {
					IF = {
						limit = { is_army_leader = yes }

						random_list = {
							50 = { add_attack = 1 }
							50 = {}
						}
					}
				}
			}
			else_if = { #since these spirits are mutually exclusive, we can use else_if for added performance!
				limit = {
					FROM = { has_idea = tenacious_defense_spirit }
				}
				character = {
					IF = {
						limit = { is_army_leader = yes }

						random_list = {
							50 = { add_defense = 1 }
							50 = {}
						}
					}
				}
			}
			else_if = {
				limit = {
					FROM = { has_idea = meticulous_preparation_spirit }
				}
				character = {
					IF = {
						limit = { is_army_leader = yes }

						random_list = {
							50 = {
								add_planning = 1
								add_logistics = 1
							}
							50 = {}
						}
					}
				}
			}
			if = {
				limit = {
					FROM = { has_idea = instilled_aggression_spirit }
				}
				character = {
					IF = {
						limit = { is_navy_leader = yes }

						random_list = {
							50 = {
								add_attack = 1
							}
							50 = {}
						}
					}
				}
			}
			else_if = {
				limit = {
					FROM = { has_idea = calculated_restraint_spirit }
				}
				character = {
					IF = {
						limit = { is_navy_leader = yes }

						random_list = {
							50 = {
								add_defense = 1
							}
							50 = {}
						}
					}
				}
			}
			else_if = {
				limit = {
					FROM = { has_idea = signals_training_spirit }
				}
				character = {
					IF = {
						limit = { is_navy_leader = yes }

						random_list = {
							50 = {
								add_maneuver = 1
								add_coordination = 1
							}
							50 = {}
						}
					}
				}
			}
			if = {
				limit = {
					character = {
						has_trait = rising_star
						skill > 2
					}
				}
				character = {
					remove_trait = { trait = rising_star }
				}
			}
		}
	}

	on_unit_leader_created = { # This uses the UNIT LEADER sub scope of a character, FROM == country
		effect = {
			character = {
				if = {
					limit = {
						is_army_leader = yes
					}
					if = {
						limit = {
							FROM = { has_idea = political_loyalty_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = {
									add_unit_leader_trait = media_personality
								}
								50 = {
									add_unit_leader_trait = politically_connected
								}
							}
						}
					}
					else_if = {
						limit = {
							FROM = { has_idea = mobile_warfare_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = {
									add_unit_leader_trait = panzer_leader
								}
								50 = {}
							}
						}
					}
					else_if = {
						limit = {
							FROM = { has_idea = inventive_leadership_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								75 = {
									random_list = {
										33 = { add_unit_leader_trait = naval_invader }
										33 = { add_unit_leader_trait = commando }
										33 = { add_unit_leader_trait = trickster }
									}
								}
								25 = {}
							}
						}
					}
					else_if = {
						limit = {
							FROM = { has_idea = mass_assault_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = {
									add_unit_leader_trait = infantry_officer
								}
								50 = {}
							}
						}
					}
					else_if = {
						limit = {
							FROM = { has_idea = superior_firepower_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = {
									add_unit_leader_trait = engineer_officer
								}
								50 = {}
							}
						}
					}
					else_if = {
						limit = {
							FROM = { has_idea = theatre_training_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = {
									random_list = {
										50 = { add_unit_leader_trait = brilliant_strategist }
										50 = { add_unit_leader_trait = inflexible_strategist }
									}
								}
								50 = {}
							}
						}
					}
					else_if = {
						limit = {
							FROM = { has_idea = KR_whampoa_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
						}
						root = {
							random_list = {
								50 = {
									add_unit_leader_trait = politically_connected
								}
								40 = {
									add_unit_leader_trait = media_personality
								}
								10 = {
									add_unit_leader_trait = war_hero
								}
							}
						}
					}
				}
				else_if = {
					limit = {
						FROM = { has_idea = fleet_in_being_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							50 = {
								add_unit_leader_trait = gunnery_expert
							}
							50 = {}
						}
					}
				}
				else_if = {
					limit = {
						FROM = { has_idea = trade_interdiction_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							25 = {
								add_unit_leader_trait = seawolf
							}
							25 = {
								add_unit_leader_trait = blockade_runner
							}
							50 = {}
						}
					}
				}
				else_if = {
					limit = {
						FROM = { has_idea = base_strike_academy_spirit } #done here instead of the trait file to avoid some oddness with generating assignable traits under certain circumstances, makes it easier to control probabilities
					}
					root = {
						random_list = {
							50 = {
								add_unit_leader_trait = aviation_enthusiast
							}
							50 = {}
						}
					}
				}
			}
		}
	}

	# New Scopes
	# Scope is the country owner of the PotF, FROM is the country of the killer
	on_pride_of_the_fleet_sunk = {
		effect = {
			log = "on_pride_of_the_fleet_sunk [GetLogThis] [GetLogRoot] [GetLogFrom]"
		}
	}

	#ROOT is winner #FROM gets annexed - This fires just before FROM gets annexed, meaning the country and everything it owns still exists. It will also fire on_annex and on_civil_war_end
	on_civil_war_end_before_annexation = {
		effect = {
			log = "on_civil_war_end_before_annexation [GetLogRoot] [GetLogFrom]"
		}
	}
	on_civil_war_end = {
		effect = {
			log = "on_civil_war_end [GetLogRoot] [GetLogFrom]"
			if = {
				limit = {
					has_country_flag = had_elections
					has_elections = no
				}
				set_politics = {
					ruling_party = var:ROOT.current_party_ideology_group
					elections_allowed = yes
				}
			}
			clr_country_flag = had_elections
		}
	}
	on_unit_leader_created = {
		effect = {
			log = "on_unit_leader_created [GetLogThis] [GetLogRoot] [GetLogFrom] [GetLogFromFrom]"
			if = {
				limit = { is_exiled_leader = yes }
				From.From = { save_event_target_as = exile_nation }
				add_unit_leader_trait = exiled_leader
				unit_leader_event = mtg_exile_leader_added.1
			}
		}
	}

	on_government_exiled = {
		effect = {
			log = "on_government_exiled [GetLogRoot] [GetLogFrom]"
		}
	}

	#Root is exile
	#From is new host
	#FromFrom is old host
	on_host_changed_from_capitulation = {
		effect = {
			log = "on_host_changed_from_capitulation [GetLogRoot] [GetLogFrom] [GetLogFromFrom]"
			#Transfer exile leaders to new host
			From.From = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					set_nationality = Root.From
				}
			}
		}
	}

	#Root is exile
	#From is old host
	on_exile_government_reinstated = {
		effect = {
			log = "on_exile_government_reinstated [GetLogRoot] [GetLogFrom]"
			From = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					set_nationality = Root
				}
			}
			Root = {
				every_army_leader = {
					limit = { is_exiled_leader_from = Root }
					remove_unit_leader_trait = exiled_leader
					remove_exile_tag = yes
				}
			}
		}
	}

	on_war = {
		effect = {
			log = "on_war [GetLogRoot]"
			# Check for puppets at war with their overlord
			if = {
				limit = {
					is_subject = yes
					any_enemy_country = { has_subject = ROOT }
				}
				overlord = {
					set_autonomy = {
						target = ROOT
						autonomy_state = autonomy_free
					}
				}
			}
		}
	}

	#ROOT = attacking side
	#FROM = defending side
	#fired when two countries end up at war with each other (on_war is fired when a country goes to war against anyone and is not fired again when it enters war against another country unless it went to peace first)
	on_war_relation_added = {
		effect = {
			log = "on_war_relation_added [GetLogRoot] [GetLogFrom]"

			# Civil war targets
			if = {
				limit = {
					OR = {
						#America
						AND = {
							is_american_tag = yes
							FROM = { is_american_tag = yes }
						}
						#Spain
						AND = {
							original_tag = SPA
							FROM = { original_tag = SPA }
						}
						#Portugal
						AND = {
							original_tag = POR
							FROM = { original_tag = POR }
						}
						#Argentina
						AND = {
							OR = {
								original_tag = FOP
								original_tag = ARG
							}
							FROM = {
								OR = {
									original_tag = FOP
									original_tag = ARG
								}
							}
						}
						#China
						AND = {
							OR = {
								original_tag = LEP
								original_tag = ANQ
								original_tag = CHI
							}
							FROM = {
								OR = {
									original_tag = LEP
									original_tag = ANQ
									original_tag = CHI
								}
							}
						}
						#Italy
						AND = {
							original_tag = SRI
							FROM = { is_italian_tag = yes }
						}
						AND = {
							FROM = { original_tag = SRI }
							is_italian_tag = yes
						}
						#Arabia
						AND = {
							OR = {
								tag = SAU
								tag = JBS
								original_tag = IKH
							}
							FROM = {
								OR = {
									tag = SAU
									tag = JBS
									original_tag = IKH
								}
							}
						}
					}
				}
				add_civil_war_target = FROM
			}

			# Volunteers
			save_event_target_as = volunteer_target
			every_other_country = {
				limit = { willing_to_send_volunteers_to_PREV = yes }
				send_volunteers_to_TARGET = yes
			}
			FROM = {
				save_event_target_as = volunteer_target
				every_other_country = {
					limit = { willing_to_send_volunteers_to_PREV = yes }
					send_volunteers_to_TARGET = yes
				}
			}

			# Boot events
			country_event = ai_events.203 #WK3 - ENT vs GER
			country_event = ai_events.204 #WK3 - RUS vs INT
			country_event = ai_events.205 #2nd Sino-Japanese War
			country_event = ai_events.208 #GEA vs JAP

			if = {
				limit = {
					OR = {
						tag = RUS
						tag = GER
					}
					FROM = {
						OR = {
							tag = RUS
							tag = GER
						}
					}
				}
				if = {
					limit = { RUS = { has_socialist_government = yes } }
					country_event = ai_events.201 #WK2 SocRUS-GER
				}
				else = {
					country_event = ai_events.201 #WK2 RUS-GER
				}
			}
			else_if = {
				limit = {
					OR = {
						tag = INT
						tag = GER
					}
					FROM = {
						OR = {
							tag = INT
							tag = GER
						}
					}
				}
				country_event = ai_events.202 #WK2 INT-GER
			}

			# Important countries for logalyzer
			if = {
				limit = {
					ROOT = { tag = FRA }
					FROM = { tag = AUS }
				}
				log = "KR_Event_Logging;AUSTRIA IN 2WK"
			}
			else_if = {
				limit = {
					ROOT = { tag = JAP }
					FROM = { tag = RUS }
				}
				log = "KR_Event_Logging;JAP DECLARES ON RUS"
			}
			else_if = {
				limit = {
					ROOT = { tag = RUS }
					FROM = { tag = JAP }
				}
				log = "KR_Event_Logging;RUS DECLARES ON JAP"
			}
			else_if = {
				limit = {
					ROOT = { tag = CAN }
					FROM = {
						OR = {
							tag = FRA
							tag = ENG
						}
					}
				}
				log = "KR_Event_Logging;ENTENTE ENTERS 2WK"
			}
			else_if = {
				limit = {
					OR = {
						tag = BPL
						tag = SER
					}
					is_subject = no
					FROM = {
						tag = AUS
						is_subject = no
					}
				}
				log = "KR_Event_Logging;PACT IN 2WK"
			}
			else_if = {
				limit = {
					tag = AUS
					is_subject = no
					FROM = {
						OR = {
							tag = BPL
							tag = SER
						}
						is_subject = no
					}
				}
				log = "KR_Event_Logging;PACT IN 2WK"
			}

			#TEMP WORKAROUND FOR ENGINE BUG: subjects cannot call their own subjects into wars
			if = {
				limit = {
					is_subject = yes
					num_subjects > 0
				}
				every_subject_country = {
					limit = { NOT = { has_war_with = FROM } }
					add_to_war = {
						targeted_alliance = ROOT
						enemy = FROM
					}
				}
			}
			FROM = {
				if = {
					limit = {
						is_subject = yes
						num_subjects > 0
					}
					every_subject_country = {
						limit = { NOT = { has_war_with = ROOT } }
						add_to_war = {
							targeted_alliance = FROM
							enemy = ROOT
						}
					}
				}
			}
		}
	}

	on_peace = {
		effect = {
			log = "on_peace [GetLogRoot]"

			# Independence
			clr_country_flag = KR_independence_war
			clr_country_flag = KR_independence_war_overlord

			#Demobilization check for the AI
			if = {
				limit = {
					is_ai = yes
					NOT = { has_country_flag = has_demobilization_check }
				}
				set_country_flag = { flag = has_demobilization_check days = 6 value = 1 }
				country_event = { id = generic_events.120 days = 6 }
			}

			#Reduce units check for the AI
			if = {
				limit = {
					is_ai = yes
					NOT = { has_country_flag = has_reduce_units_check }
				}
				set_country_flag = has_reduce_units_check
				country_event = { id = generic_events.121 days = 7 random_days = 3 }
			}

			# Volunteers
			if = {
				limit = { exists = yes } #on_annex should take precedence
				save_event_target_as = volunteer_target
				every_other_country = {
					limit = { has_country_flag = sent_volunteers_@PREV }
					clear_volunteers_to_TARGET = yes
				}
			}
		}
	}

	# ROOT is country, this is ran for every country
	on_daily = {
		effect = {
			unit_limit_calculation_effect = yes

			if = {
				limit = { has_variable = political_power_ideology }
				set_temp_variable = { temp = global.ideology_groups^political_power_ideology }
				set_variable = { party_popularity_gain_mapped = party_popularity@var:temp }
			}
			if = {
				limit = { has_coalition = yes }
				set_variable = { coalition_pp_gain = 0 }
				for_each_loop = {
					array = coalitions_array
					if = {
						limit = { check_variable = { v = 2 } }
						set_temp_variable = { temp = global.ideology_groups^i }
						set_temp_variable = { temp = party_popularity@var:temp }
						if = {
							limit = { check_variable = { coalition_stability_array^i > 0 } }
							multiply_temp_variable = { temp = coalition_stability_array^i }
						}
						else = {
							multiply_temp_variable = { temp = coalition_stability?0.5 }
						}
						add_to_variable = { coalition_pp_gain = temp }
					}
				}
			}
		}
	}

	# root country that invades
	# scope state that is invaded
	# from scope state that the invasion started
	on_naval_invasion = {
		effect = {
			log = "on_naval_invasion [GetLogThis] [GetLogRoot] [GetLogFrom]"
			if = {
				limit = {
					ROOT = {
						has_tech = marines_commandos_demolition
						divisions_in_state = {
							unit = marine_commando
							size > 0
							state = PREV
						}
					}
					NOT = { has_state_flag = marines_commando_effect }
					NOT = { is_owned_by = ROOT }
				}
				SF_marine_demoliton_effect = yes # Note that the state flag condition is not preventing it from doing 1 damage per division
			}
		}
	}

	# root country that paradrops
	# scope state that is paradroped into
	# from scope state that the paradrop started
	on_paradrop = {
		effect = {
			log = "on_paradrop [GetLogThis] [GetLogRoot] [GetLogFrom]"
		}
	}

	# root is the state that was dropped into
	# from is the dropping country
	# this differs from on_paradrop in that it is run once per paradrop, not once per unit dropped
	on_units_paradropped_in_state = {
		effect = {
			log = "on_units_paradropped_in_state [GetLogThis] [GetLogRoot] [GetLogFrom]"
			if = {
				limit = {
					FROM = { has_tech = paras_dispersed_drop }
					NOT = { has_state_flag = para_drop_effect }
					NOT = { is_controlled_by = FROM }
				}
				SF_PARA_sabotage_effect = yes
			}
			if = {
				limit = {
					FROM = { has_tech = paras_combat_drop }
					NOT = { has_state_flag = para_drop_effect }
				}
				SF_PARA_combat_effect = yes
			}
		}
	}

	on_unit_leader_promote_from_ranks_veteran = { #Unit leader scope, FROM is unit
		effect = {
			FROM = {
				add_random_valid_trait_from_unit = {
					character = ROOT
				}
			}
		}
	}

	on_unit_leader_promote_from_ranks_green = { #Unit leader scope, FROM is unit
		effect = {
		}
	}

	on_add_history = { #Unit Scope
		effect = {
		}
	}
}
